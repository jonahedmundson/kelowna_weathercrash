family = binomial)
plot(training)
#predicting missing (precip) values
predict(rainsnow.glm, fullWeather[precip,], type = "response")
#predicting missing (precip) values
round(predict(rainsnow.glm, fullWeather[precip,], type = "response"))
#predicting missing (precip) values
table(round(predict(rainsnow.glm, fullWeather[precip,], type = "response")))
#predicting missing (precip) values
round(predict(rainsnow.glm, fullWeather[precip,], type = "response"))
#predicting missing (precip) values
rainsnowpredict = round(predict(rainsnow.glm,
fullWeather[precip,], type = "response"))
for (i in rainsnowpredict){}
for (i in rainsnowpredict){print(i)}
for (i in rownames(rainsnowpredict)){print(i)}
for (i in names(rainsnowpredict)){print(i)}
43616
tail(rainsnowpredict)
rainsnowpredict[43616]
rainsnowpredict["43616"]
as.numeric(rainsnowpredict["43616"])
as.numeric('5')
summary(fullWeather$Weather)
ls()
getwd()
fullWeather = c()
for (i in c(2017:2021)){
for (j in c(1:12)){
temp = subset(read.csv(paste0('../../weatherdata/en_climate_hourly_BC_1123939_',
sprintf("%02d", j), '-', i, '_P1H.csv')),
select = - c(`Temp.Flag`,
`Dew.Point.Temp.Flag`, `Rel.Hum.Flag`,
`Precip..Amount.Flag`, `Wind.Dir.Flag`,
`Wind.Spd.Flag`, `Visibility.Flag`,
`Stn.Press.Flag`, `Hmdx`, `Hmdx.Flag`, `Wind.Chill.Flag`))
fullWeather = rbind(fullWeather, temp)
}
}
#assigning a Julian day variable
library(lubridate)
fullWeather$julianday = yday(as.Date(fullWeather$Date.Time..LST., tz='LST'))
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
## SETTING EMPTY TO NA
fullWeather$Weather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE] = NA
## CHECKING
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
## CHECKING
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
Need to relevel factor to remove empty string option:
"" %in% levels(fullWeather$Weather)
fullWeather$Weather = droplevels(fullWeather$Weather)
"" %in% levels(fullWeather$Weather)
precip = which(fullWeather$Precip..Amount..mm. > 0 &
is.na(fullWeather$Precip..Amount..mm.) == FALSE &
is.na(fullWeather$Weather)
) #gives rows that have precip but NA for weather
length(precip)
fullWeather$actual = NA
for (i in 1:nrow(fullWeather)){
if (fullWeather$Rain[i] == 1){
fullWeather$actual[i] = 'Rain'
}
if (fullWeather$Snow[i] == 1){
fullWeather$actual[i] = 'Snow'
}
}
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > 0){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
fullWeather$actual = NA
for (i in 1:nrow(fullWeather)){
if (fullWeather$Rain[i] == 1){
fullWeather$actual[i] = 'Rain'
}
if (fullWeather$Snow[i] == 1){
fullWeather$actual[i] = 'Snow'
}
}
fullWeather = c()
for (i in c(2017:2021)){
for (j in c(1:12)){
temp = subset(read.csv(paste0('../../weatherdata/en_climate_hourly_BC_1123939_',
sprintf("%02d", j), '-', i, '_P1H.csv')),
select = - c(`Temp.Flag`,
`Dew.Point.Temp.Flag`, `Rel.Hum.Flag`,
`Precip..Amount.Flag`, `Wind.Dir.Flag`,
`Wind.Spd.Flag`, `Visibility.Flag`,
`Stn.Press.Flag`, `Hmdx`, `Hmdx.Flag`, `Wind.Chill.Flag`))
fullWeather = rbind(fullWeather, temp)
}
}
nrow(fullWeather)
24*365*5 + 24 #2020 was a leap year
#assigning a Julian day variable
library(lubridate)
fullWeather$julianday = yday(as.Date(fullWeather$Date.Time..LST., tz='LST'))
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
## SETTING EMPTY TO NA
fullWeather$Weather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE] = NA
## CHECKING
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
## CHECKING
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
"" %in% levels(fullWeather$Weather)
fullWeather$Weather = droplevels(fullWeather$Weather)
"" %in% levels(fullWeather$Weather)
#creating columns
lst = c()
for (i in levels(fullWeather$Weather)){
temp = unlist(strsplit(as.character(i), ","))
lst = c(lst, temp)
}
lst = lst[!(duplicated(lst))] #removing duplicates
lst
for (i in lst){
fullWeather[, i] = factor("0", levels = c("0", "1"))
}
names(fullWeather)
#assigning values
for (i in 1:nrow(fullWeather)){
if (!is.na(fullWeather$Weather[i])){
temp = as.character(fullWeather$Weather[i])
temp = unlist(strsplit(temp, ","))
for (j in temp){
fullWeather[i, j] = "1"
}
}
}
#collapsing to only: Rain, Snow, Thunderstorms, Fog, Freezing Rain
fullWeather$Rain[fullWeather$'Moderate Rain' == 1] = 1
fullWeather$Rain[fullWeather$'Heavy Rain' == 1] = 1
fullWeather$Snow[fullWeather$'Moderate Snow' == 1] = 1
fullWeather$Snow[fullWeather$'Heavy Snow' == 1] = 1
fullWeather$Snow[fullWeather$'Blowing Snow' == 1] = 1
fullWeather$Fog[fullWeather$'Freezing Fog' == 1] = 1
fullWeather$Fog[fullWeather$'Haze' == 1] = 1
fullWeather = subset(fullWeather, select = - c(`Moderate Rain`,
`Heavy Rain`, `Moderate Snow`, `Heavy Snow`,
`Blowing Snow`, `Freezing Fog`, `Haze`))
summary(fullWeather[,c("Weather", "Rain", "Fog", "Snow",
"Thunderstorms", "Freezing Rain")])
precip = which(fullWeather$Precip..Amount..mm. > 0 &
is.na(fullWeather$Precip..Amount..mm.) == FALSE &
is.na(fullWeather$Weather)
) #gives rows that have precip but NA for weather
length(precip)
fullWeather$actual = NA
for (i in 1:nrow(fullWeather)){
if (fullWeather$Rain[i] == 1){
fullWeather$actual[i] = 'Rain'
}
if (fullWeather$Snow[i] == 1){
fullWeather$actual[i] = 'Snow'
}
}
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > 0){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
rainsnow = table(fullWeather$expected, fullWeather$actual)
rainsnow
#probabilities
#chance of raining if above 0
rainprob = rainsnow[1,1]/(rainsnow[1,1]+rainsnow[1,2])
rainprob
#chance of snowing if below 0
snowprob = rainsnow[2,2]/(rainsnow[2,2]+rainsnow[2,1])
snowprob
training = subset(fullWeather[-precip,],
subset = (is.na(fullWeather$actual[-precip]) == FALSE),
select=c('Temp...C.', 'actual'))
training$actual = as.factor(training$actual)
rainsnow.glm = glm(actual~Temp...C., data = training,
family = binomial)
#summary(rainsnow.glm)
plot(training, col='red')
test = min(training$Temp...C.):max(training$Temp...C.)
#predicting missing (precip) values
rainsnowpredict = round(predict(rainsnow.glm,
fullWeather[precip,], type = "response"))
summary(fullWeather$Rain)
summary(fullWeather$Snow)
#where 0 = raining and 1 = snowing
for (i in names(rainsnowpredict)){
if (rainsnowpredict[i] == 0){
fullWeather[as.numeric(i), 'Rain'] = 1
} else {
fullWeather[as.numeric(i), 'Snow'] = 1
}
}
summary(fullWeather$Rain)
summary(fullWeather$Snow)
2759-2454
1743-1692
summary(fullWeather$Snow, fullWeather$Rain)
setwd('/home/jonah/mds/sideproject/kelowna_weathercrash/stats_scripts/datacleaning')
fullWeather = c()
for (i in c(2017:2021)){
for (j in c(1:12)){
temp = subset(read.csv(paste0('../../weatherdata/en_climate_hourly_BC_1123939_',
sprintf("%02d", j), '-', i, '_P1H.csv')),
select = - c(`Temp.Flag`,
`Dew.Point.Temp.Flag`, `Rel.Hum.Flag`,
`Precip..Amount.Flag`, `Wind.Dir.Flag`,
`Wind.Spd.Flag`, `Visibility.Flag`,
`Stn.Press.Flag`, `Hmdx`, `Hmdx.Flag`, `Wind.Chill.Flag`))
fullWeather = rbind(fullWeather, temp)
}
}
nrow(fullWeather)
24*365*5 + 24 #2020 was a leap year
#assigning a Julian day variable
library(lubridate)
fullWeather$julianday = yday(as.Date(fullWeather$Date.Time..LST., tz='LST'))
summary(fullWeather)
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
## SETTING EMPTY TO NA
fullWeather$Weather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE] = NA
## CHECKING
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
"" %in% levels(fullWeather$Weather)
fullWeather$Weather = droplevels(fullWeather$Weather)
"" %in% levels(fullWeather$Weather)
#creating columns
lst = c()
for (i in levels(fullWeather$Weather)){
temp = unlist(strsplit(as.character(i), ","))
lst = c(lst, temp)
}
lst = lst[!(duplicated(lst))] #removing duplicates
lst
for (i in lst){
fullWeather[, i] = factor("0", levels = c("0", "1"))
}
names(fullWeather)
#assigning values
for (i in 1:nrow(fullWeather)){
if (!is.na(fullWeather$Weather[i])){
temp = as.character(fullWeather$Weather[i])
temp = unlist(strsplit(temp, ","))
for (j in temp){
fullWeather[i, j] = "1"
}
}
}
#collapsing to only: Rain, Snow, Thunderstorms, Fog, Freezing Rain
fullWeather$Rain[fullWeather$'Moderate Rain' == 1] = 1
fullWeather$Rain[fullWeather$'Heavy Rain' == 1] = 1
fullWeather$Snow[fullWeather$'Moderate Snow' == 1] = 1
fullWeather$Snow[fullWeather$'Heavy Snow' == 1] = 1
fullWeather$Snow[fullWeather$'Blowing Snow' == 1] = 1
fullWeather$Fog[fullWeather$'Freezing Fog' == 1] = 1
fullWeather$Fog[fullWeather$'Haze' == 1] = 1
fullWeather = subset(fullWeather, select = - c(`Moderate Rain`,
`Heavy Rain`, `Moderate Snow`, `Heavy Snow`,
`Blowing Snow`, `Freezing Fog`, `Haze`))
summary(fullWeather[,c("Weather", "Rain", "Fog", "Snow",
"Thunderstorms", "Freezing Rain")])
precip = which(fullWeather$Precip..Amount..mm. > 0 &
is.na(fullWeather$Precip..Amount..mm.) == FALSE &
is.na(fullWeather$Weather)
) #gives rows that have precip but NA for weather
length(precip)
fullWeather$actual = NA
for (i in 1:nrow(fullWeather)){
if (fullWeather$Rain[i] == 1){
fullWeather$actual[i] = 'Rain'
}
if (fullWeather$Snow[i] == 1){
fullWeather$actual[i] = 'Snow'
}
}
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > 0){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
rainsnow = table(fullWeather$expected, fullWeather$actual)
rainsnow
#probabilities
#chance of raining if above 0
rainprob = rainsnow[1,1]/(rainsnow[1,1]+rainsnow[1,2])
rainprob
#chance of snowing if below 0
snowprob = rainsnow[2,2]/(rainsnow[2,2]+rainsnow[2,1])
snowprob
training = subset(fullWeather[-precip,],
subset = (is.na(fullWeather$actual[-precip]) == FALSE),
select=c('Temp...C.', 'actual'))
training$actual = as.factor(training$actual)
library(randomForest)
RFmodel = randomForest(actual~Temp...C., data=training, importance=TRUE)
RFmodel
plot(training, col='red', main="Rain/Snow RF", yaxt='n', ylab="")
test = min(training$Temp...C.):max(training$Temp...C.)
#predicting missing (precip) values
rainsnowpredict = predict(RFmodel,
fullWeather[precip,], type = "response")
#old Rain and Snow variables
summary(fullWeather$Rain)
summary(fullWeather$Snow)
#adding predictions
#where 0 = raining and 1 = snowing
for (i in names(rainsnowpredict)){
if (rainsnowpredict[i] == 'Rain'){
fullWeather[as.numeric(i), 'Rain'] = 1
fullWeather[as.numeric(i), 'Weather'] = 'Rain'
} else {
fullWeather[as.numeric(i), 'Snow'] = 1
fullWeather[as.numeric(i), 'Weather'] = 'Snow'
}
}
#new Rain and Snow variables
summary(fullWeather$Rain)
summary(fullWeather$Snow)
#checking that it worked
length(which(fullWeather$Precip..Amount..mm. > 0 &
is.na(fullWeather$Precip..Amount..mm.) == FALSE &
is.na(fullWeather$Weather)))
fullCrash = subset(read.csv('../../crashdata/Southern Interior_Full Data_data.csv'),
select = - c(`Crash.Breakdown.2`, `Region`,
`Municipality.Name..ifnull.`))
summary(fullCrash)
fullCrash$linker = paste(fullCrash$Date.Of.Loss.Year,
fullCrash$Month.Of.Year,
fullCrash$Day.Of.Week,
fullCrash$Time.Category)
head(fullCrash$linker)
head(fullWeather$Time..LST.)
weatherTime = function(x){
#assigns the correct time category
if x %in% c('00:00', '01:00', '02:00'){
weatherTime = function(x){ #assigns the correct time category
if x %in% c('00:00', '01:00', '02:00'){
#assigns the correct time category
if (x %in% c('00:00', '01:00', '02:00')){
return('00:00-02:59')
}
weatherTime = function(x){
#assigns the correct time category
if (x %in% c('00:00', '01:00', '02:00')){
return('00:00-02:59')
}
if (x %in% c('03:00', '04:00', '05:00')){
return('03:00-05:59')
}
if (x %in% c('06:00', '07:00', '08:00')){
return('06:00-08:59')
}
if (x %in% c('09:00', '10:00', '11:00')){
return('09:00-11:59')
}
if (x %in% c('12:00', '13:00', '14:00')){
return('12:00-14:59')
}
if (x %in% c('15:00', '16:00', '17:00')){
return('15:00-17:59')
}
if (x %in% c('18:00', '19:00', '20:00')){
return('18:00-20:59')
}
if (x %in% c('21:00', '22:00', '23:00')){
return('21:00-23:59')
}
}
timeCategory = sapply(fullWeather$Time..LST., weatherTime)
head(timeCategory)
head(fullWeather$Time..LST.)
head(fullCrash$linker)
?yday
head(fullWeather$Date.Time..LST.)
fullWeather$Date.Time..LST.[1]
wday(as.Date(fullWeather$Date.Time..LST.[1], tz='LST'))
wday(as.Date(fullWeather$Date.Time..LST.[1], tz='LST'), label=TRUE)
fullWeather$Date.Time..LST.[101]
wday(as.Date(fullWeather$Date.Time..LST.[101], tz='LST'), label=TRUE)
fullWeather$weekday = wday(as.Date(fullWeather$Date.Time..LST., tz='LST'), label=TRUE)
head(fullWeather$weekday, 100)
head(year(as.Date(fullWeather$Date.Time..LST., tz='LST')))
head(fullWeather$Year)
head(fullWeather$Month)
testing = as.factor(c('hi', 'hello', 'test'))
testing
testing = as.factor(c('hi', 'hello', 'test', 'hi'))
testing
?revalue
levels(testing)
levels(testing)[2]
levels(testing)[2] = 'new'
testing
?wday
wday(as.Date(fullWeather$Date.Time..LST.[101], tz='LST'), label=TRUE, abbr = FALSE)
month(1)
month(4)
myear(1)
?month
toupper('hi')
(fullWeather$weekday[1])
as.character(fullWeather$weekday[1])
head(fullWeather$weekday)
head(fullWeather$weekday, 50)
#weekday, in uppercase
fullWeather$weekday = toupper(as.character(wday(as.Date(fullWeather$Date.Time..LST., tz='LST'), label=TRUE, abbr=FALSE)))
head(fullWeather$weekday, 50)
#month
fullWeather$monthName = toupper(as.character(month(as.Date(fullWeather$Date.Time..LST., tz='LST'), label=TRUE, abbr=FALSE)))
head(fullWeather$month, 50)
head(fullWeather$Month, 50)
head(fullWeather$monthName, 50)
names(fullWeather)
summary(fullWeather$month)
table(fullWeather$month)
table(fullWeather$monthName)
#creating weather linker column
fullWeather$linker = paste(fullWeather$Year,
fullWeather$monthName,
fullWeather$weekday,
fullWeather$timeCategory)
head(fullWeather$linker, 50)
weatherTime = function(x){
#assigns the correct time category
if (x %in% c('00:00', '01:00', '02:00')){
return('00:00-02:59')
}
if (x %in% c('03:00', '04:00', '05:00')){
return('03:00-05:59')
}
if (x %in% c('06:00', '07:00', '08:00')){
return('06:00-08:59')
}
if (x %in% c('09:00', '10:00', '11:00')){
return('09:00-11:59')
}
if (x %in% c('12:00', '13:00', '14:00')){
return('12:00-14:59')
}
if (x %in% c('15:00', '16:00', '17:00')){
return('15:00-17:59')
}
if (x %in% c('18:00', '19:00', '20:00')){
return('18:00-20:59')
}
if (x %in% c('21:00', '22:00', '23:00')){
return('21:00-23:59')
}
}
fullWeather$timeCategory = sapply(fullWeather$Time..LST., weatherTime)
#creating weather linker column
fullWeather$linker = paste(fullWeather$Year,
fullWeather$monthName,
fullWeather$weekday,
fullWeather$timeCategory)
head(fullWeather$linker, 50)
head(fullWeather$linker, 10)
head(fullCrash$linker, 10)
duplicated(fullWeather$linker[1:100])
?duplicated
anyDuplicated(fullWeather$linker[1:100])
seq(1:100, 4)
seq(1, 100, 7)
seq(1, 100, 3)
test = c()
test
test$hi = c(2, 3, 5)
test
test$bruh = c('t', 'y', 'k')
test
test = numeric(0)
test$hi = c(2, 3, 5)
tset
test
test = c()
test$hi = c(2, 3, 5)
test$bruh = c('t', 'y', 'k')
test
as.data.frame(test)
