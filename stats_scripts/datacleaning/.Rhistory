summary(precip)
length(precip)
head(fullWeather$Date.Time..LST., 20)
yday(head(fullWeather$Date.Time..LST., 20))
#assigning a Julian day variable
library(lubridate)
yday(head(fullWeather$Date.Time..LST., 20))
??yday
?as.Date
yday(as.Date(head(fullWeather$Date.Time..LST., 20), tz='LST'))
yday(as.Date(head(fullWeather$Date.Time..LST., 25), tz='LST'))
yday(as.Date(head(fullWeather$Date.Time..LST., 125), tz='LST'))
fullWeather$julianday = yday(as.Date(fullWeather$Date.Time..LST., 125), tz='LST')
fullWeather$julianday = yday(as.Date(fullWeather$Date.Time..LST., 125, tz='LST'))
fullWeather$julianday = yday(as.Date(fullWeather$Date.Time..LST., tz='LST'))
summary(fullWeather$julianday)
fullWeather$testing = NA
for (i in 1:nrow(fullWeather)){
if (fullWeather$Rain[i] == 1){
fullWeather$testing[i] = 'Rain'
}
if (fullWeather$Snow[i] == 1){
fullWeather$testing[i] = 'Snow'
}
}
head(precip)
head(fullWeather[precip, "Weather"])
head(fullWeather[precip, "Weather"], 20)
head(fullWeather[precip, "Weather"], 200)
head(fullWeather[precip, "Weather"])
plot(fullWeather$testing[precip]~fullWeather$julianday[precip])
plot(fullWeather$testing[precip], fullWeather$julianday[precip])
plot(fullWeather$testing[precip]~fullWeather$julianday[precip])
fullWeather$testing[precip]
fullWeather$actual = NA
for (i in 1:nrow(fullWeather)){
if (fullWeather$Rain[i] == 1){
fullWeather$actual[i] = 'Rain'
}
if (fullWeather$Snow[i] == 1){
fullWeather$actual[i] = 'Snow'
}
}
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > 0){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
table(fullWeather$expected, fullWeather$actual)
fullWeather$expected[precip]
plot(fullWeather$expected[precip]~fullWeather$julianday[precip])
fullWeather$julianday[precip]
plot(fullWeather$expected[precip], fullWeather$julianday[precip])
plot(fullWeather$julianday[precip], fullWeather$expected[precip])
plot(as.factor(fullWeather$expected[precip]), fullWeather$julianday[precip])
plot(fullWeather$julianday[precip], as.factor(fullWeather$expected[precip]))
mday(fullWeather[precip, "Date.Time..LST."])
mday(as.Date(fullWeather[precip, "Date.Time..LST."]), tz='LST')
mday(as.Date(fullWeather[precip, "Date.Time..LST."], tz='LST'))
??month
?month
month(as.Date(fullWeather[precip, "Date.Time..LST."], tz='LST'))
table(month(as.Date(fullWeather[precip, "Date.Time..LST."], tz='LST')))
table(month(as.Date(fullWeather[precip & fullWeather$expected == 'Above 0' & (is.na(fullWeather$expected) == FALSE), "Date.Time..LST."], tz='LST')))
table(month(as.Date(fullWeather[fullWeather[precip,] & fullWeather$expected == 'Above 0' & (is.na(fullWeather$expected) == FALSE), "Date.Time..LST."], tz='LST')))
table(month(as.Date(fullWeather[index(fullWeather) %in% precip & fullWeather$expected == 'Above 0' & (is.na(fullWeather$expected) == FALSE), "Date.Time..LST."], tz='LST')))
head(fullWeather[precip])
head(fullWeather[precip, "Date.Timee..LST."])
head(fullWeather[precip, "Date.Time..LST."])
table(month(as.Date(fullWeather[precip, "Date.Time..LST."][fullWeather$expected == 'Above 0' & (is.na(fullWeather$expected) == FALSE)], tz='LST')))
fullWeather[precip, "Date.Time..LST."][fullWeather$expected == 'Above 0' & (is.na(fullWeather$expected) == FALSE)]
length(fullWeather[precip, "Date.Time..LST."])
length(fullWeather[precip, "Date.Time..LST."][fullWeather$expected == 'Above 0' & (is.na(fullWeather$expected) == FALSE)])
length(which(fullWeather[precip, "Date.Time..LST."], fullWeather$expected == 'Above 0' & (is.na(fullWeather$expected) == FALSE)]))
length(which(fullWeather[precip, "Date.Time..LST."], fullWeather$expected == 'Above 0' & (is.na(fullWeather$expected) == FALSE)))
length(subset(fullWeather[precip, "Date.Time..LST."], fullWeather$expected == 'Above 0' & (is.na(fullWeather$expected) == FALSE)))
?subset
length(subset(fullWeather[precip, "Date.Time..LST."], subset = fullWeather$expected == 'Above 0' & (is.na(fullWeather$expected) == FALSE)))
length(subset(fullWeather[precip,], subset = fullWeather$expected == 'Above 0' & (is.na(fullWeather$expected) == FALSE)), select='Date.Time..LST.')
length(subset(fullWeather[precip,], subset = fullWeather$expected == 'Above 0' & (is.na(fullWeather$expected) == FALSE), select='Date.Time..LST.'))
subset(fullWeather[precip,], subset = fullWeather$expected == 'Above 0' & (is.na(fullWeather$expected) == FALSE), select='Date.Time..LST.')
fullWeather[precip,]
nrow(fullWeather[precip,])
subset(fullWeather[precip,], subset = fullWeather$expected == 'Above 0', select=c('Date.Time..LST.'))
nrow(subset(fullWeather[precip,], subset = fullWeather$expected == 'Above 0', select=c('Date.Time..LST.')))
nrow(subset(fullWeather[precip,], subset = fullWeather$expected[precip] == 'Above 0', select=c('Date.Time..LST.')))
subset(fullWeather[precip,], subset = fullWeather$expected[precip] == 'Above 0' & (is.na(fullWeather$expected[precip]) == FALSE), select='Date.Time..LST.')
month(subset(fullWeather[precip,], subset = fullWeather$expected[precip] == 'Above 0' & (is.na(fullWeather$expected[precip]) == FALSE), select='Date.Time..LST.'))
table(month(as.Date(subset(fullWeather[precip,], subset = fullWeather$expected[precip] == 'Above 0' & (is.na(fullWeather$expected[precip]) == FALSE), select='Date.Time..LST.'), tz='LST')))
table(month(as.Date((subset(fullWeather[precip,], subset = fullWeather$expected[precip] == 'Above 0' & (is.na(fullWeather$expected[precip]) == FALSE), select='Date.Time..LST.')), tz='LST')))
subset(fullWeather[precip,], subset = fullWeather$expected[precip] == 'Above 0' & (is.na(fullWeather$expected[precip]) == FALSE), select='Date.Time..LST.')
table(month(as.Date(as.vector(subset(fullWeather[precip,], subset = fullWeather$expected[precip] == 'Above 0' & (is.na(fullWeather$expected[precip]) == FALSE), select='Date.Time..LST.')), tz='LST')))
as.vector(subset(fullWeather[precip,], subset = fullWeather$expected[precip] == 'Above 0' & (is.na(fullWeather$expected[precip]) == FALSE), select='Date.Time..LST.'))
test = subset(fullWeather[precip,], subset = fullWeather$expected[precip] == 'Above 0' & (is.na(fullWeather$expected[precip]) == FALSE), select='Date.Time..LST.')
table(month(as.Date(test, tz='LST')))
as.Date(test, tz='LST')
as.Date(test[1], tz='LST')
test[1]
str(test)
test[1,1]
as.vector(test)[1]
as.Date(test[1], tz='LST')
class(test)
class(test[1])
class(test[1,1])
as.Date.factor(test, tz='LST')
as.Date.factor(test[1,1], tz='LST')
as.Date.dates(test, tz='LST')
test[1,1]
as.Date.factor(test$Date.Time..LST., tz='LST')
as.Date(test$Date.Time..LST., tz='LST')
table(month(as.Date(subset(fullWeather[precip,], subset = fullWeather$expected[precip] == 'Above 0' & (is.na(fullWeather$expected[precip]) == FALSE), select='Date.Time..LST.')$Date.Time..LST., tz='LST')))
table(month(as.Date(subset(fullWeather[precip,], subset = fullWeather$expected[precip] == 'Below 0' & (is.na(fullWeather$expected[precip]) == FALSE), select='Date.Time..LST.')$Date.Time..LST., tz='LST')))
plot(fullWeather$julianday[precip], as.factor(fullWeather$expected[precip]))
plot(fullWeather$julianday[precip], as.factor(fullWeather$expected[precip]), yaxt= 'n')
plot(fullWeather$julianday[precip], as.factor(fullWeather$expected[precip]), yaxt= 'n', ylim=c(0, 3))
plot(fullWeather$julianday[precip], as.factor(fullWeather$expected[precip]), yaxt= 'n', ylim=c(0.5, 2.5))
axis(side = 2, at = c(1,2), labels = c('Above 0', 'Below 0'))
axis(side = 2, at = c(1,2), labels = c('Above 0', 'Below 0'), cex=0.5)
axis(side = 2, at = c(1,2), labels = c('Above 0', 'Below 0'), cex.axis=0.5)
axis(side = 2, at = c(1,2), labels = c('Above 0', 'Below 0'), cex.axis=c(0.8, 0.8))
axis(side = 2, at = c(1,2), labels = c('Above 0', 'Below 0'), cex.axis=0.8
)
plot(fullWeather$julianday[precip], as.factor(fullWeather$expected[precip]), yaxt= 'n', ylim=c(0.5, 2.5))
axis(side = 2, at = c(1,2), labels = c('Above 0', 'Below 0'), cex.axis=0.8)
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
table(fullWeather$expected, fullWeather$actual)
nrow(fullWeather)
?table
table(fullWeather$expected, fullWeather$actual, useNA = 'ifany')
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > -5){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
table(fullWeather$expected, fullWeather$actual)
if (x > -1){
return("Above 0")
} else {
return("Below 0")
}
fullWeather$actual = NA
for (i in 1:nrow(fullWeather)){
if (fullWeather$Rain[i] == 1){
fullWeather$actual[i] = 'Rain'
}
if (fullWeather$Snow[i] == 1){
fullWeather$actual[i] = 'Snow'
}
}
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > -1){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
table(fullWeather$expected, fullWeather$actual)
# for (i in 1:precip){
#   if fullWeather[i, "Temp...C."]
# }
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > -1){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
table(fullWeather$expected, fullWeather$actual)
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > 1){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
table(fullWeather$expected, fullWeather$actual)
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > 0.5){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
table(fullWeather$expected, fullWeather$actual)
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > -0.5){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
table(fullWeather$expected, fullWeather$actual)
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > 0){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
table(fullWeather$expected, fullWeather$actual)
rainsnow = table(fullWeather$expected, fullWeather$actual)
rainsnow
rainsnow[1,1]
#probabilities
#chance of raining if above 0
rainprob = rainsnow[1,1]/(rainsnow[1,1]+rainsnow[2,1])
rainprob
#chance of snowing if below 0
snowprob = rainsnow[2,2]/(rainsnow[2,2]+rainsnow[1,2])
snowprob
#probabilities
#chance of raining if above 0
rainprob = rainsnow[1,1]/(rainsnow[1,1]+rainsnow[1,2])
rainprob
#chance of snowing if below 0
snowprob = rainsnow[2,2]/(rainsnow[2,2]+rainsnow[2,1])
snowprob
training = fullWeather[-precip,]
nrow(training)
nrow(fullWeather)-356
training = subset(fullWeather[-precip,], subset = (is.na(fullWeather$expected[-precip]) == FALSE), select=c('Temp...C.', 'actual'))
nrow(training)
training = subset(fullWeather[-precip,], subset = (is.na(fullWeather$actual[-precip]) == FALSE), select=c('Temp...C.', 'actual'))
nrow(training)
sum(rainsnow)
head(trainging)
head(traiging)
head(training)
training = subset(fullWeather[-precip,],
subset = (is.na(fullWeather$actual[-precip]) == FALSE),
select=c('Temp...C.', 'actual'))
rainsnow.glm = glm(actual~Temp...C., data = training,
family = binomial)
rainsnow.glm = glm(as.factor(actual)~Temp...C., data = training,
family = binomial)
summary(rainsnow.glm)
plot(rainsnow.glm)
plot(training)
head(training)
summary(training)
training = subset(fullWeather[-precip,],
subset = (is.na(fullWeather$actual[-precip]) == FALSE),
select=c('Temp...C.', 'actual'))
training$actual = as.factor(training$actual)
rainsnow.glm = glm(actual~Temp...C., data = training,
family = binomial)
plot(training)
#predicting missing (precip) values
predict(rainsnow.glm, fullWeather[precip,], type = "response")
#predicting missing (precip) values
round(predict(rainsnow.glm, fullWeather[precip,], type = "response"))
#predicting missing (precip) values
table(round(predict(rainsnow.glm, fullWeather[precip,], type = "response")))
#predicting missing (precip) values
round(predict(rainsnow.glm, fullWeather[precip,], type = "response"))
#predicting missing (precip) values
rainsnowpredict = round(predict(rainsnow.glm,
fullWeather[precip,], type = "response"))
for (i in rainsnowpredict){}
for (i in rainsnowpredict){print(i)}
for (i in rownames(rainsnowpredict)){print(i)}
for (i in names(rainsnowpredict)){print(i)}
43616
tail(rainsnowpredict)
rainsnowpredict[43616]
rainsnowpredict["43616"]
as.numeric(rainsnowpredict["43616"])
as.numeric('5')
summary(fullWeather$Weather)
ls()
getwd()
fullWeather = c()
for (i in c(2017:2021)){
for (j in c(1:12)){
temp = subset(read.csv(paste0('../../weatherdata/en_climate_hourly_BC_1123939_',
sprintf("%02d", j), '-', i, '_P1H.csv')),
select = - c(`Temp.Flag`,
`Dew.Point.Temp.Flag`, `Rel.Hum.Flag`,
`Precip..Amount.Flag`, `Wind.Dir.Flag`,
`Wind.Spd.Flag`, `Visibility.Flag`,
`Stn.Press.Flag`, `Hmdx`, `Hmdx.Flag`, `Wind.Chill.Flag`))
fullWeather = rbind(fullWeather, temp)
}
}
#assigning a Julian day variable
library(lubridate)
fullWeather$julianday = yday(as.Date(fullWeather$Date.Time..LST., tz='LST'))
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
## SETTING EMPTY TO NA
fullWeather$Weather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE] = NA
## CHECKING
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
## CHECKING
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
Need to relevel factor to remove empty string option:
"" %in% levels(fullWeather$Weather)
fullWeather$Weather = droplevels(fullWeather$Weather)
"" %in% levels(fullWeather$Weather)
precip = which(fullWeather$Precip..Amount..mm. > 0 &
is.na(fullWeather$Precip..Amount..mm.) == FALSE &
is.na(fullWeather$Weather)
) #gives rows that have precip but NA for weather
length(precip)
fullWeather$actual = NA
for (i in 1:nrow(fullWeather)){
if (fullWeather$Rain[i] == 1){
fullWeather$actual[i] = 'Rain'
}
if (fullWeather$Snow[i] == 1){
fullWeather$actual[i] = 'Snow'
}
}
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > 0){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
fullWeather$actual = NA
for (i in 1:nrow(fullWeather)){
if (fullWeather$Rain[i] == 1){
fullWeather$actual[i] = 'Rain'
}
if (fullWeather$Snow[i] == 1){
fullWeather$actual[i] = 'Snow'
}
}
fullWeather = c()
for (i in c(2017:2021)){
for (j in c(1:12)){
temp = subset(read.csv(paste0('../../weatherdata/en_climate_hourly_BC_1123939_',
sprintf("%02d", j), '-', i, '_P1H.csv')),
select = - c(`Temp.Flag`,
`Dew.Point.Temp.Flag`, `Rel.Hum.Flag`,
`Precip..Amount.Flag`, `Wind.Dir.Flag`,
`Wind.Spd.Flag`, `Visibility.Flag`,
`Stn.Press.Flag`, `Hmdx`, `Hmdx.Flag`, `Wind.Chill.Flag`))
fullWeather = rbind(fullWeather, temp)
}
}
nrow(fullWeather)
24*365*5 + 24 #2020 was a leap year
#assigning a Julian day variable
library(lubridate)
fullWeather$julianday = yday(as.Date(fullWeather$Date.Time..LST., tz='LST'))
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
## SETTING EMPTY TO NA
fullWeather$Weather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE] = NA
## CHECKING
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
## CHECKING
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
"" %in% levels(fullWeather$Weather)
fullWeather$Weather = droplevels(fullWeather$Weather)
"" %in% levels(fullWeather$Weather)
#creating columns
lst = c()
for (i in levels(fullWeather$Weather)){
temp = unlist(strsplit(as.character(i), ","))
lst = c(lst, temp)
}
lst = lst[!(duplicated(lst))] #removing duplicates
lst
for (i in lst){
fullWeather[, i] = factor("0", levels = c("0", "1"))
}
names(fullWeather)
#assigning values
for (i in 1:nrow(fullWeather)){
if (!is.na(fullWeather$Weather[i])){
temp = as.character(fullWeather$Weather[i])
temp = unlist(strsplit(temp, ","))
for (j in temp){
fullWeather[i, j] = "1"
}
}
}
#collapsing to only: Rain, Snow, Thunderstorms, Fog, Freezing Rain
fullWeather$Rain[fullWeather$'Moderate Rain' == 1] = 1
fullWeather$Rain[fullWeather$'Heavy Rain' == 1] = 1
fullWeather$Snow[fullWeather$'Moderate Snow' == 1] = 1
fullWeather$Snow[fullWeather$'Heavy Snow' == 1] = 1
fullWeather$Snow[fullWeather$'Blowing Snow' == 1] = 1
fullWeather$Fog[fullWeather$'Freezing Fog' == 1] = 1
fullWeather$Fog[fullWeather$'Haze' == 1] = 1
fullWeather = subset(fullWeather, select = - c(`Moderate Rain`,
`Heavy Rain`, `Moderate Snow`, `Heavy Snow`,
`Blowing Snow`, `Freezing Fog`, `Haze`))
summary(fullWeather[,c("Weather", "Rain", "Fog", "Snow",
"Thunderstorms", "Freezing Rain")])
precip = which(fullWeather$Precip..Amount..mm. > 0 &
is.na(fullWeather$Precip..Amount..mm.) == FALSE &
is.na(fullWeather$Weather)
) #gives rows that have precip but NA for weather
length(precip)
fullWeather$actual = NA
for (i in 1:nrow(fullWeather)){
if (fullWeather$Rain[i] == 1){
fullWeather$actual[i] = 'Rain'
}
if (fullWeather$Snow[i] == 1){
fullWeather$actual[i] = 'Snow'
}
}
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > 0){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
rainsnow = table(fullWeather$expected, fullWeather$actual)
rainsnow
#probabilities
#chance of raining if above 0
rainprob = rainsnow[1,1]/(rainsnow[1,1]+rainsnow[1,2])
rainprob
#chance of snowing if below 0
snowprob = rainsnow[2,2]/(rainsnow[2,2]+rainsnow[2,1])
snowprob
training = subset(fullWeather[-precip,],
subset = (is.na(fullWeather$actual[-precip]) == FALSE),
select=c('Temp...C.', 'actual'))
training$actual = as.factor(training$actual)
rainsnow.glm = glm(actual~Temp...C., data = training,
family = binomial)
#summary(rainsnow.glm)
plot(training, col='red')
test = min(training$Temp...C.):max(training$Temp...C.)
#predicting missing (precip) values
rainsnowpredict = round(predict(rainsnow.glm,
fullWeather[precip,], type = "response"))
summary(fullWeather$Rain)
summary(fullWeather$Snow)
#where 0 = raining and 1 = snowing
for (i in names(rainsnowpredict)){
if (rainsnowpredict[i] == 0){
fullWeather[as.numeric(i), 'Rain'] = 1
} else {
fullWeather[as.numeric(i), 'Snow'] = 1
}
}
summary(fullWeather$Rain)
summary(fullWeather$Snow)
2759-2454
1743-1692
summary(fullWeather$Snow, fullWeather$Rain)
