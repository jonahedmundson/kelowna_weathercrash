is.na(fullWeather$Weather) == FALSE, "Weather"])
# Chunk 3: chunk3
"" %in% levels(fullWeather$Weather)
fullWeather$Weather = droplevels(fullWeather$Weather)
"" %in% levels(fullWeather$Weather)
# Chunk 4: chunk5
#creating columns
lst = c()
for (i in levels(fullWeather$Weather)){
temp = unlist(strsplit(as.character(i), ","))
lst = c(lst, temp)
}
lst = lst[!(duplicated(lst))] #removing duplicates
lst
for (i in lst){
fullWeather[, i] = factor("0", levels = c("0", "1"))
}
names(fullWeather)
############
#assigning values
for (i in 1:nrow(fullWeather)){
if (!is.na(fullWeather$Weather[i])){
temp = as.character(fullWeather$Weather[i])
temp = unlist(strsplit(temp, ","))
for (j in temp){
fullWeather[i, j] = "1"
}
}
}
###########
#collapsing to only: Rain, Snow, Thunderstorms, Fog, Freezing Rain
fullWeather$Rain[fullWeather$'Moderate Rain' == 1] = 1
fullWeather$Rain[fullWeather$'Heavy Rain' == 1] = 1
fullWeather$Snow[fullWeather$'Moderate Snow' == 1] = 1
fullWeather$Snow[fullWeather$'Heavy Snow' == 1] = 1
fullWeather$Snow[fullWeather$'Blowing Snow' == 1] = 1
fullWeather$Fog[fullWeather$'Freezing Fog' == 1] = 1
fullWeather$Fog[fullWeather$'Haze' == 1] = 1
fullWeather = subset(fullWeather, select = - c(`Moderate Rain`,
`Heavy Rain`, `Moderate Snow`, `Heavy Snow`,
`Blowing Snow`, `Freezing Fog`, `Haze`))
summary(fullWeather[,c("Weather", "Rain", "Fog", "Snow",
"Thunderstorms", "Freezing Rain")])
#converting indicator columns to numeric
fullWeather$Fog = as.numeric(as.character(fullWeather$Fog))
fullWeather$'Freezing Rain' = as.numeric(as.character(fullWeather$'Freezing Rain'))
fullWeather$Snow = as.numeric(as.character(fullWeather$Snow))
fullWeather$Rain = as.numeric(as.character(fullWeather$Rain))
fullWeather$Thunderstorms = as.numeric(as.character(fullWeather$Thunderstorms))
# Chunk 5: chunk4a
precip = which(fullWeather$Precip..Amount..mm. > 0 &
is.na(fullWeather$Precip..Amount..mm.) == FALSE &
is.na(fullWeather$Weather)
) #gives rows that have precip but NA for weather
length(precip)
# Chunk 6: chunk4
fullWeather$actual = NA
for (i in 1:nrow(fullWeather)){
if (fullWeather$Rain[i] == 1){
fullWeather$actual[i] = 'Rain'
}
if (fullWeather$Snow[i] == 1){
fullWeather$actual[i] = 'Snow'
}
}
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > 0){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
rainsnow = table(fullWeather$expected, fullWeather$actual)
rainsnow
#probabilities
#chance of raining if above 0
rainprob = rainsnow[1,1]/(rainsnow[1,1]+rainsnow[1,2])
rainprob
#chance of snowing if below 0
snowprob = rainsnow[2,2]/(rainsnow[2,2]+rainsnow[2,1])
snowprob
# Chunk 7: chunk4RF
training = subset(fullWeather[-precip,],
subset = (is.na(fullWeather$actual[-precip]) == FALSE),
select=c('Temp...C.', 'actual'))
training$actual = as.factor(training$actual)
library(randomForest)
RFmodel = randomForest(actual~Temp...C., data=training, importance=TRUE)
RFmodel
plot(training, col='red', main="Rain/Snow RF", yaxt='n', ylab="")
test = min(training$Temp...C.):max(training$Temp...C.)
lines(test, predict(RFmodel,
data.frame(Temp...C. = test), type = "response"), lwd=2)
axis(side = 2, at = c(1,2), labels = c('Rain', 'Snow'), cex.axis=1.2, las=1)
#predicting missing (precip) values
rainsnowpredict = predict(RFmodel,
fullWeather[precip,], type = "response")
#old Rain and Snow variables
summary(as.factor(fullWeather$Rain))
summary(as.factor(fullWeather$Snow))
#adding predictions
#where 0 = raining and 1 = snowing
for (i in names(rainsnowpredict)){
if (rainsnowpredict[i] == 'Rain'){
fullWeather[as.numeric(i), 'Rain'] = 1
fullWeather[as.numeric(i), 'Weather'] = 'Rain'
} else {
fullWeather[as.numeric(i), 'Snow'] = 1
fullWeather[as.numeric(i), 'Weather'] = 'Snow'
}
}
#new Rain and Snow variables
summary(as.factor(fullWeather$Rain))
summary(as.factor(fullWeather$Snow))
#checking that it worked
length(which(fullWeather$Precip..Amount..mm. > 0 &
is.na(fullWeather$Precip..Amount..mm.) == FALSE &
is.na(fullWeather$Weather)))
# Chunk 10: chunkX
fullCrash = subset(read.csv('../../crashdata/Southern Interior_Full Data_data.csv'),
select = - c(`Crash.Breakdown.2`, `Region`,
`Municipality.Name..ifnull.`))
summary(fullCrash)
# Chunk 11: chunknewcol
fullCrash$linker = paste(fullCrash$Date.Of.Loss.Year,
fullCrash$Month.Of.Year,
fullCrash$Day.Of.Week,
fullCrash$Time.Category)
head(fullCrash$linker)
# Chunk 12: chunkweathercollapse
weatherTime = function(x){
#assigns the correct time category
if (x %in% c('00:00', '01:00', '02:00')){
return('00:00-02:59')
}
if (x %in% c('03:00', '04:00', '05:00')){
return('03:00-05:59')
}
if (x %in% c('06:00', '07:00', '08:00')){
return('06:00-08:59')
}
if (x %in% c('09:00', '10:00', '11:00')){
return('09:00-11:59')
}
if (x %in% c('12:00', '13:00', '14:00')){
return('12:00-14:59')
}
if (x %in% c('15:00', '16:00', '17:00')){
return('15:00-17:59')
}
if (x %in% c('18:00', '19:00', '20:00')){
return('18:00-20:59')
}
if (x %in% c('21:00', '22:00', '23:00')){
return('21:00-23:59')
}
}
fullWeather$timeCategory = sapply(fullWeather$Time..LST., weatherTime)
#we now can average the weather over these time periods
timereducedWeather = c()
j = 1
for (i in seq(1, nrow(fullWeather), 3)){
#creating a whole new dataframe
timereducedWeather$linker[j] = fullWeather$linker[i]
#avg of temp
timereducedWeather$Temp...C.[j] = mean(c(fullWeather$Temp...C.[i],
fullWeather$Temp...C.[i+1], fullWeather$Temp...C.[i+2]), na.rm = TRUE)
#avg of dew point temp
timereducedWeather$Dew.Point.Temp...C.[j] = mean(c(fullWeather$Dew.Point.Temp...C.[i],
fullWeather$Dew.Point.Temp...C.[i+1], fullWeather$Dew.Point.Temp...C.[i+2]), na.rm = TRUE)
#avg of relative humidity
timereducedWeather$Rel.Hum....[j] = mean(c(fullWeather$Rel.Hum....[i],
fullWeather$Rel.Hum....[i+1], fullWeather$Rel.Hum....[i+2]), na.rm = TRUE)
#avg of precipitation amount
timereducedWeather$Precip..Amount..mm.[j] = mean(c(fullWeather$Precip..Amount..mm.[i],
fullWeather$Precip..Amount..mm.[i+1], fullWeather$Precip..Amount..mm.[i+2]), na.rm = TRUE)
#avg of wind direction
timereducedWeather$Wind.Dir..10s.deg.[j] = mean(c(fullWeather$Wind.Dir..10s.deg.[i],
fullWeather$Wind.Dir..10s.deg.[i+1], fullWeather$Wind.Dir..10s.deg.[i+2]), na.rm = TRUE)
#avg of wind speed
timereducedWeather$Wind.Spd..km.h.[j] = mean(c(fullWeather$Wind.Spd..km.h.[i],
fullWeather$Wind.Spd..km.h.[i+1],  fullWeather$Wind.Spd..km.h.[i+2]), na.rm = TRUE)
#avg of visibility
timereducedWeather$Visibility..km.[j] = mean(c(fullWeather$Visibility..km.[i],
fullWeather$Visibility..km.[i+1], fullWeather$Visibility..km.[i+2]), na.rm = TRUE)
#avg of stn pressure
timereducedWeather$Stn.Press..kPa.[j] = mean(c(fullWeather$Stn.Press..kPa.[i],
fullWeather$Stn.Press..kPa.[i+1], fullWeather$Stn.Press..kPa.[i+2]), na.rm = TRUE)
#avg of wind chill
timereducedWeather$Wind.Chill[j] = mean(c(fullWeather$Wind.Chill[i],
fullWeather$Wind.Chill[i+1], fullWeather$Wind.Chill[i+2]), na.rm = TRUE)
#indicator variables
timereducedWeather$Fog[j] = max(c(fullWeather$Fog[i], fullWeather$Fog[i+1],
fullWeather$Fog[i+2]))
timereducedWeather$'Freezing Rain'[j] = max(c(fullWeather$'Freezing Rain'[i],
fullWeather$'Freezing Rain'[i+1], fullWeather$'Freezing Rain'[i+2]))
timereducedWeather$Snow[j] = max(c(fullWeather$Snow[i], fullWeather$Snow[i+1],
fullWeather$Snow[i+2]))
timereducedWeather$Rain[j] = max(c(fullWeather$Rain[i], fullWeather$Rain[i+1],
fullWeather$Rain[i+2]))
timereducedWeather$Thunderstorms[j] = max(c(fullWeather$Thunderstorms[i],
fullWeather$Thunderstorms[i+1], fullWeather$Thunderstorms[i+2]))
#incrementing ticker
j = j+1
}
timereducedWeather = as.data.frame(timereducedWeather)
# Chunk 13: chunkweatherdayoftheweek
#weekday, in uppercase
fullWeather$weekday = toupper(as.character(wday(as.Date(fullWeather$Date.Time..LST., tz='LST'), label=TRUE, abbr=FALSE)))
#month
fullWeather$monthName = toupper(as.character(month(as.Date(fullWeather$Date.Time..LST., tz='LST'), label=TRUE, abbr=FALSE)))
#creating weather linker column
fullWeather$linker = paste(fullWeather$Year,
fullWeather$monthName,
fullWeather$weekday,
fullWeather$timeCategory)
head(fullWeather$linker)
head(timereducedWeather)
head(timereducedWeather)
timereducedWeather$linker
head(timereducedWeather)
test = c('hi', 'g', 'te', 'hi', 'hi', 'fr')
duplicated(test)
!duplicated(test)
test[!duplicated(test)]
# Chunk 1: chunk1
fullWeather = c()
for (i in c(2017:2021)){
for (j in c(1:12)){
temp = subset(read.csv(paste0('../../weatherdata/en_climate_hourly_BC_1123939_',
sprintf("%02d", j), '-', i, '_P1H.csv')),
select = - c(`Temp.Flag`,
`Dew.Point.Temp.Flag`, `Rel.Hum.Flag`,
`Precip..Amount.Flag`, `Wind.Dir.Flag`,
`Wind.Spd.Flag`, `Visibility.Flag`,
`Stn.Press.Flag`, `Hmdx`, `Hmdx.Flag`, `Wind.Chill.Flag`))
fullWeather = rbind(fullWeather, temp)
}
}
nrow(fullWeather)
24*365*5 + 24 #2020 was a leap year
#assigning a Julian day variable
library(lubridate)
fullWeather$julianday = yday(as.Date(fullWeather$Date.Time..LST., tz='LST'))
summary(fullWeather)
# Chunk 2: chunk2
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
## SETTING EMPTY TO NA
fullWeather$Weather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE] = NA
## CHECKING
length(fullWeather[fullWeather$Weather == "" &
is.na(fullWeather$Weather) == FALSE, "Weather"])
# Chunk 3: chunk3
"" %in% levels(fullWeather$Weather)
fullWeather$Weather = droplevels(fullWeather$Weather)
"" %in% levels(fullWeather$Weather)
# Chunk 4: chunk5
#creating columns
lst = c()
for (i in levels(fullWeather$Weather)){
temp = unlist(strsplit(as.character(i), ","))
lst = c(lst, temp)
}
lst = lst[!(duplicated(lst))] #removing duplicates
lst
for (i in lst){
fullWeather[, i] = factor("0", levels = c("0", "1"))
}
names(fullWeather)
############
#assigning values
for (i in 1:nrow(fullWeather)){
if (!is.na(fullWeather$Weather[i])){
temp = as.character(fullWeather$Weather[i])
temp = unlist(strsplit(temp, ","))
for (j in temp){
fullWeather[i, j] = "1"
}
}
}
###########
#collapsing to only: Rain, Snow, Thunderstorms, Fog, Freezing Rain
fullWeather$Rain[fullWeather$'Moderate Rain' == 1] = 1
fullWeather$Rain[fullWeather$'Heavy Rain' == 1] = 1
fullWeather$Snow[fullWeather$'Moderate Snow' == 1] = 1
fullWeather$Snow[fullWeather$'Heavy Snow' == 1] = 1
fullWeather$Snow[fullWeather$'Blowing Snow' == 1] = 1
fullWeather$Fog[fullWeather$'Freezing Fog' == 1] = 1
fullWeather$Fog[fullWeather$'Haze' == 1] = 1
fullWeather = subset(fullWeather, select = - c(`Moderate Rain`,
`Heavy Rain`, `Moderate Snow`, `Heavy Snow`,
`Blowing Snow`, `Freezing Fog`, `Haze`))
summary(fullWeather[,c("Weather", "Rain", "Fog", "Snow",
"Thunderstorms", "Freezing Rain")])
#converting indicator columns to numeric
fullWeather$Fog = as.numeric(as.character(fullWeather$Fog))
fullWeather$'Freezing Rain' = as.numeric(as.character(fullWeather$'Freezing Rain'))
fullWeather$Snow = as.numeric(as.character(fullWeather$Snow))
fullWeather$Rain = as.numeric(as.character(fullWeather$Rain))
fullWeather$Thunderstorms = as.numeric(as.character(fullWeather$Thunderstorms))
# Chunk 5: chunk4a
precip = which(fullWeather$Precip..Amount..mm. > 0 &
is.na(fullWeather$Precip..Amount..mm.) == FALSE &
is.na(fullWeather$Weather)
) #gives rows that have precip but NA for weather
length(precip)
# Chunk 6: chunk4
fullWeather$actual = NA
for (i in 1:nrow(fullWeather)){
if (fullWeather$Rain[i] == 1){
fullWeather$actual[i] = 'Rain'
}
if (fullWeather$Snow[i] == 1){
fullWeather$actual[i] = 'Snow'
}
}
assign = function(x){
if (is.na(x)){
return(NA)
}
if (x > 0){
return("Above 0")
} else {
return("Below 0")
}
}
#classification table
fullWeather$expected = sapply(fullWeather$Temp...C., assign)
rainsnow = table(fullWeather$expected, fullWeather$actual)
rainsnow
#probabilities
#chance of raining if above 0
rainprob = rainsnow[1,1]/(rainsnow[1,1]+rainsnow[1,2])
rainprob
#chance of snowing if below 0
snowprob = rainsnow[2,2]/(rainsnow[2,2]+rainsnow[2,1])
snowprob
# Chunk 7: chunk4RF
training = subset(fullWeather[-precip,],
subset = (is.na(fullWeather$actual[-precip]) == FALSE),
select=c('Temp...C.', 'actual'))
training$actual = as.factor(training$actual)
library(randomForest)
RFmodel = randomForest(actual~Temp...C., data=training, importance=TRUE)
RFmodel
plot(training, col='red', main="Rain/Snow RF", yaxt='n', ylab="")
test = min(training$Temp...C.):max(training$Temp...C.)
lines(test, predict(RFmodel,
data.frame(Temp...C. = test), type = "response"), lwd=2)
axis(side = 2, at = c(1,2), labels = c('Rain', 'Snow'), cex.axis=1.2, las=1)
#predicting missing (precip) values
rainsnowpredict = predict(RFmodel,
fullWeather[precip,], type = "response")
#old Rain and Snow variables
summary(as.factor(fullWeather$Rain))
summary(as.factor(fullWeather$Snow))
#adding predictions
#where 0 = raining and 1 = snowing
for (i in names(rainsnowpredict)){
if (rainsnowpredict[i] == 'Rain'){
fullWeather[as.numeric(i), 'Rain'] = 1
fullWeather[as.numeric(i), 'Weather'] = 'Rain'
} else {
fullWeather[as.numeric(i), 'Snow'] = 1
fullWeather[as.numeric(i), 'Weather'] = 'Snow'
}
}
#new Rain and Snow variables
summary(as.factor(fullWeather$Rain))
summary(as.factor(fullWeather$Snow))
#checking that it worked
length(which(fullWeather$Precip..Amount..mm. > 0 &
is.na(fullWeather$Precip..Amount..mm.) == FALSE &
is.na(fullWeather$Weather)))
# Chunk 10: chunkX
fullCrash = subset(read.csv('../../crashdata/Southern Interior_Full Data_data.csv'),
select = - c(`Crash.Breakdown.2`, `Region`,
`Municipality.Name..ifnull.`))
summary(fullCrash)
# Chunk 11: chunknewcol
fullCrash$linker = paste(fullCrash$Date.Of.Loss.Year,
fullCrash$Month.Of.Year,
fullCrash$Day.Of.Week,
fullCrash$Time.Category)
head(fullCrash$linker)
# Chunk 12: chunkweathercollapse
weatherTime = function(x){
#assigns the correct time category
if (x %in% c('00:00', '01:00', '02:00')){
return('00:00-02:59')
}
if (x %in% c('03:00', '04:00', '05:00')){
return('03:00-05:59')
}
if (x %in% c('06:00', '07:00', '08:00')){
return('06:00-08:59')
}
if (x %in% c('09:00', '10:00', '11:00')){
return('09:00-11:59')
}
if (x %in% c('12:00', '13:00', '14:00')){
return('12:00-14:59')
}
if (x %in% c('15:00', '16:00', '17:00')){
return('15:00-17:59')
}
if (x %in% c('18:00', '19:00', '20:00')){
return('18:00-20:59')
}
if (x %in% c('21:00', '22:00', '23:00')){
return('21:00-23:59')
}
}
fullWeather$timeCategory = sapply(fullWeather$Time..LST., weatherTime)
# Chunk 13: chunkweatherdayoftheweek
#weekday, in uppercase
fullWeather$weekday = toupper(as.character(wday(as.Date(fullWeather$Date.Time..LST., tz='LST'), label=TRUE, abbr=FALSE)))
#month
fullWeather$monthName = toupper(as.character(month(as.Date(fullWeather$Date.Time..LST., tz='LST'), label=TRUE, abbr=FALSE)))
#creating weather linker column
fullWeather$linker = paste(fullWeather$Year,
fullWeather$monthName,
fullWeather$weekday,
fullWeather$timeCategory)
head(fullWeather$linker)
#we now can average the weather over these time periods
timereducedWeather = c()
j = 1
for (i in seq(1, nrow(fullWeather), 3)){
#creating a whole new dataframe
timereducedWeather$linker[j] = fullWeather$linker[i]
#avg of temp
timereducedWeather$Temp...C.[j] = mean(c(fullWeather$Temp...C.[i],
fullWeather$Temp...C.[i+1], fullWeather$Temp...C.[i+2]), na.rm = TRUE)
#avg of dew point temp
timereducedWeather$Dew.Point.Temp...C.[j] = mean(c(fullWeather$Dew.Point.Temp...C.[i],
fullWeather$Dew.Point.Temp...C.[i+1], fullWeather$Dew.Point.Temp...C.[i+2]), na.rm = TRUE)
#avg of relative humidity
timereducedWeather$Rel.Hum....[j] = mean(c(fullWeather$Rel.Hum....[i],
fullWeather$Rel.Hum....[i+1], fullWeather$Rel.Hum....[i+2]), na.rm = TRUE)
#avg of precipitation amount
timereducedWeather$Precip..Amount..mm.[j] = mean(c(fullWeather$Precip..Amount..mm.[i],
fullWeather$Precip..Amount..mm.[i+1], fullWeather$Precip..Amount..mm.[i+2]), na.rm = TRUE)
#avg of wind direction
timereducedWeather$Wind.Dir..10s.deg.[j] = mean(c(fullWeather$Wind.Dir..10s.deg.[i],
fullWeather$Wind.Dir..10s.deg.[i+1], fullWeather$Wind.Dir..10s.deg.[i+2]), na.rm = TRUE)
#avg of wind speed
timereducedWeather$Wind.Spd..km.h.[j] = mean(c(fullWeather$Wind.Spd..km.h.[i],
fullWeather$Wind.Spd..km.h.[i+1],  fullWeather$Wind.Spd..km.h.[i+2]), na.rm = TRUE)
#avg of visibility
timereducedWeather$Visibility..km.[j] = mean(c(fullWeather$Visibility..km.[i],
fullWeather$Visibility..km.[i+1], fullWeather$Visibility..km.[i+2]), na.rm = TRUE)
#avg of stn pressure
timereducedWeather$Stn.Press..kPa.[j] = mean(c(fullWeather$Stn.Press..kPa.[i],
fullWeather$Stn.Press..kPa.[i+1], fullWeather$Stn.Press..kPa.[i+2]), na.rm = TRUE)
#avg of wind chill
timereducedWeather$Wind.Chill[j] = mean(c(fullWeather$Wind.Chill[i],
fullWeather$Wind.Chill[i+1], fullWeather$Wind.Chill[i+2]), na.rm = TRUE)
#indicator variables
timereducedWeather$Fog[j] = max(c(fullWeather$Fog[i], fullWeather$Fog[i+1],
fullWeather$Fog[i+2]))
timereducedWeather$'Freezing Rain'[j] = max(c(fullWeather$'Freezing Rain'[i],
fullWeather$'Freezing Rain'[i+1], fullWeather$'Freezing Rain'[i+2]))
timereducedWeather$Snow[j] = max(c(fullWeather$Snow[i], fullWeather$Snow[i+1],
fullWeather$Snow[i+2]))
timereducedWeather$Rain[j] = max(c(fullWeather$Rain[i], fullWeather$Rain[i+1],
fullWeather$Rain[i+2]))
timereducedWeather$Thunderstorms[j] = max(c(fullWeather$Thunderstorms[i],
fullWeather$Thunderstorms[i+1], fullWeather$Thunderstorms[i+2]))
#incrementing ticker
j = j+1
}
timereducedWeather = as.data.frame(timereducedWeather)
head(timereducedWeather)
# Chunk 14: weatheraverage
#getting indices of duplicates
# Chunk 15: finalchunk
#save(alldata, file = "../rda_files/all_data.rda")
head(timereducedWeather)
table(duplicated(timereducedWeather$linker))
11248/3360
table(timereducedWeather$linker)[1:5]
table(timereducedWeather$linker)[134:156]
table(table(timereducedWeather$linker))
2192+1168
nrow(timereducedWeather)
3360 + 11248
test = c('hi', 'g', 'te', 'hi', 'hi', 'fr')
duplicated(test)
test[!duplicated(test)]
!duplicated(test)
#getting indices of duplicates
idx = duplicated(timereducedWeather$linker)
finalWeather = timereducedWeather[!idx,]
nrow(finalWeather)
?merge
nrow(fullCrash)
alldata = merge(x=fullCrash,y=finalWeather,by="linker",all.x=TRUE)
nrow(fullCrash)
head(alldata)
fullCrash[fullCrash$linker == '2017 APRIL FRIDAY 00:00-02:59',]
alldata = merge(x=fullCrash,y=finalWeather,by="linker",all.x=TRUE, sort=FALSE)
finalWeather[finalWeather$linker == '2017 APRIL FRIDAY 00:00-02:59',]
save(alldata, file = "../rda_files/all_data.rda")
getwd()
