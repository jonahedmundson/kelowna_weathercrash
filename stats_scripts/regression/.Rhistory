load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
#cleaned and combined
regdata = load_first_object("../../rda_files/reg_data.rda")
#cleaned and combined
regdata = load_first_object("../../rda_files/reg_data.rda")
plot(density(regdata$crashes))
names(regdata)
load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
#cleaned and combined
regdata = load_first_object("../../rda_files/reg_data.rda")
names(regdata)
regdata$linker[1]
substr(regdata$linker[1], 1, 4)
regdata$year = as.numeric(substr(regdata$linker, 1, 4))
table(regdata$year)
train = regdata[regdata$year < 2021,]
test = regdata[regdata$year == 2021,]
dim(train)
dim(test)
crash.lm = lm(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, x = TRUE, y = TRUE)
#summary(crash.lm)
crash.step = step(crash.lm, trace=0, direction = 'forward')
summary(crash.step)
predict(crash.step, newdata = test, class = 'regression')
plot(density(crash.pred))
#calculating MSE
crash.pred = predict(crash.step, newdata = test, class = 'regression')
plot(density(crash.pred))
plot(density(crash.pred))
plot(density(crash.pred))
lines(density(test$crashes))
cat('MLR MSE:', (crash.pred-test$crashes)^2)
cat('MLR MSE:', mean((crash.pred-test$crashes)^2))
plot(density(crash.pred))
lines(density(test$crashes), col=2)
X = with(train,data.frame(month,day,temp,relhum,precip,wind.dir,wind.spd,visibility,pressure))
library(np)
isa = is
#supress printing
quiet <- function(x) {
sink(tempfile())
on.exit(sink())
invisible(force(x))
}
np.test = quiet(with(train, npcmstest(model = crash.step, xdat = X, ydat = crashes)))
#X = with(train,data.frame(month,day,temp,relhum,precip,wind.dir,wind.spd,visibility,pressure))
#np.test = quiet(with(train, npcmstest(model = crash.step, xdat = X, ydat = crashes)))
save(np.test, file='./MLR_nptest.Rdata')
np.test1 = load_first_object('./MLR_nptest.Rdata')
np.test1
?glm
crashes.glm = glm(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train,
family = inverse.gaussian(link='1/mu^2'))
plot(density(train$crashes), main='', xlab='Num. of Crashes per Day', ylim=c(0, 0.016), lwd=2)
lines(density(test$crashes), col=2, lwd=2)
lines(density(crash.pred), col=3, lwd=2)
lines(density(glm.pred), col=4, lwd=2)
#calculating MSE
glm.pred = predict(crashes.glm, newdata = test, class = 'regression')
plot(density(train$crashes), main='', xlab='Num. of Crashes per Day', ylim=c(0, 0.016), lwd=2)
lines(density(test$crashes), col=2, lwd=2)
lines(density(crash.pred), col=3, lwd=2)
lines(density(glm.pred), col=4, lwd=2)
legend("topright",
legend = c("Training Data", "Testing Data", "MLR Predicted", "GLM Predicted"),
col = 1:4,
lty = 1, lwd=2
)
plot(density(glm.pred))
?predict.glm
#calculating MSE
glm.pred = predict(crashes.glm, newdata = test, class = 'link')
plot(density(glm.pred))
glm.pred
#calculating MSE
glm.pred = predict(crashes.glm, newdata = test, class = 'response')
plot(density(glm.pred))
summary(glm.pred)
summary(crashes.glm)
#calculating MSE
crash.pred = predict(crash.step, newdata = test, class = 'response')
#calculating MSE
glm.pred = predict(crashes.glm, newdata = test, class = 'response')
crashes.glm = glm(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train,
family = inverse.gaussian(link='1/mu^2'))
#calculating MSE
glm.pred = predict(crashes.glm, newdata = test, class = 'response')
plot(density(glm.pred))
crashes.glm = glm(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train,
family = inverse.gaussian(link='identity'))
#calculating MSE
glm.pred = predict(crashes.glm, newdata = test, class = 'response')
plot(density(glm.pred))
crashes.glm = glm(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train,
family = inverse.gaussian(link='1/mu^2'))
summary(crashes.glm)
nonp = npreg(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, regtype="ll", bwmethod="cv.aic")
save(nonp, './nonpreg.Rdata')
save(nonp, file='./nonpreg.Rdata')
nonp2 = load_first_object('./nonpreg.Rdata')
summary(nonp2)
nonp.test = npsigtest(nonp)
save(nonp.test, file='./nonp_sigtest.Rdata')
rm(nonp.test)
nonp.test
nonp.test = load_first_object('./nonp_sigtest.Rdata')
nonp.test
glm.pred = predict(nonp, newdata = test, class = 'response')
nonp.pred = predict(nonp, newdata = test, class = 'response')
nonp.pred
nonp.victims = npreg(victims~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, regtype="ll", bwmethod="cv.aic")
#nonp.victims = npreg(victims~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, regtype="ll", bwmethod="cv.aic")
save(nonp.victims, file='./nonpreg_victims.Rdata')
#nonp.victims = npreg(victims~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, regtype="ll", bwmethod="cv.aic")
#save(nonp.victims, file='./nonpreg_victims.Rdata')
nonp.victims = load_first_object('./nonpreg_victims.Rdata')
nonp.sigtest.victims = npsigtest(nonp)
#nonp.sigtest.victims = npsigtest(nonp)
save(nonp.sigtest.victims, file='./nonp_sigtest_victims.Rdata')
#nonp.sigtest.victims = npsigtest(nonp)
#save(nonp.sigtest.victims, file='./nonp_sigtest_victims.Rdata')
nonp.test.victims = load_first_object('./nonp_sigtest_victims.Rdata')
nonp.test.victims
tree.pred = predict(crash.tree, newdata=test)
library(tree)
crash.tree = tree(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train)
tree.pred = predict(crash.tree, newdata=test)
tree.pred[1:3]
tree.pred = predict(crash.tree, newdata=test, type = 'tree')
tree.pred[1:3]
tree.pred$where[1:3]
tree.pred = predict(crash.tree, newdata=test)
tree.pred[1:3]
tree.pred = predict(crash.tree, newdata=test, type = 'tree')
cat('Decision Tree MSE:', mean((tree.pred-test$crashes)^2))
tree.pred
test = plot(crash.step)
train = train[-72,]
train[72,]
library(randomForest)
crash.rf = randomForest(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, importance=TRUE)
crash.rf
rf.pred = predict(crash.tree, newdata=test, type='vector')
cat('Decision Tree MSE:', mean((rf.pred-test$crashes)^2))
rf.pred
rf.pred = predict(crash.tree, newdata=test)
rf.pred
rf.pred = unname(predict(crash.tree, newdata=test, type='vector'))
cat('Decision Tree MSE:', mean((rf.pred-test$crashes)^2))
mean((rf.pred-test$crashes)^2
))
mean((rf.pred-test$crashes)^2)
test$crashes
?randomForest
names(train)
names(train[,-11])
library(glmnet)
grid <- exp(seq(5, -10, length=100))
lm.lasso <- cv.glmnet(as.matrix(train[,-11]), train[,"crashes"], alpha=1, lambda=grid, standardize = TRUE)
lm.lasso <- cv.glmnet(as.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')]), train[,"crashes"], alpha=1, lambda=grid, standardize = TRUE)
as.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')]), train[,"crashes"]
as.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')])
as.factor(as.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')]))
#actually fitting model
lammin = lm.lasso$lambda.min
lm.lasso2 = glmnet(data.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')]), train[,"crashes"], alpha = 1, lambda=lammin)
library(glmnet)
grid <- exp(seq(5, -10, length=100))
lm.lasso <- cv.glmnet(data.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')]), train[,"crashes"], alpha=1, lambda=grid, standardize = TRUE)
plot(lm.lasso$glmnet.fit, label=TRUE, xvar="lambda")
#actually fitting model
lammin = lm.lasso$lambda.min
lm.lasso2 = glmnet(data.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')]), train[,"crashes"], alpha = 1, lambda=lammin)
coef(lm.lasso2)
#mse
#calculating MSE
lasso.pred = predict(lm.lasso2, newdata = test, class = 'response')
?predict.glmnet
lm.lasso2
lm.lasso2$dev.ratio
cat('Value of Î» that results in the lowest MSE:', lammin)
