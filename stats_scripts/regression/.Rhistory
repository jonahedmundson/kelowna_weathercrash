rm(nonp.test)
nonp.test
nonp.test = load_first_object('./nonp_sigtest.Rdata')
nonp.test
glm.pred = predict(nonp, newdata = test, class = 'response')
nonp.pred = predict(nonp, newdata = test, class = 'response')
nonp.pred
nonp.victims = npreg(victims~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, regtype="ll", bwmethod="cv.aic")
#nonp.victims = npreg(victims~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, regtype="ll", bwmethod="cv.aic")
save(nonp.victims, file='./nonpreg_victims.Rdata')
#nonp.victims = npreg(victims~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, regtype="ll", bwmethod="cv.aic")
#save(nonp.victims, file='./nonpreg_victims.Rdata')
nonp.victims = load_first_object('./nonpreg_victims.Rdata')
nonp.sigtest.victims = npsigtest(nonp)
#nonp.sigtest.victims = npsigtest(nonp)
save(nonp.sigtest.victims, file='./nonp_sigtest_victims.Rdata')
#nonp.sigtest.victims = npsigtest(nonp)
#save(nonp.sigtest.victims, file='./nonp_sigtest_victims.Rdata')
nonp.test.victims = load_first_object('./nonp_sigtest_victims.Rdata')
nonp.test.victims
tree.pred = predict(crash.tree, newdata=test)
library(tree)
crash.tree = tree(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train)
tree.pred = predict(crash.tree, newdata=test)
tree.pred[1:3]
tree.pred = predict(crash.tree, newdata=test, type = 'tree')
tree.pred[1:3]
tree.pred$where[1:3]
tree.pred = predict(crash.tree, newdata=test)
tree.pred[1:3]
tree.pred = predict(crash.tree, newdata=test, type = 'tree')
cat('Decision Tree MSE:', mean((tree.pred-test$crashes)^2))
tree.pred
test = plot(crash.step)
train = train[-72,]
train[72,]
library(randomForest)
crash.rf = randomForest(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, importance=TRUE)
crash.rf
rf.pred = predict(crash.tree, newdata=test, type='vector')
cat('Decision Tree MSE:', mean((rf.pred-test$crashes)^2))
rf.pred
rf.pred = predict(crash.tree, newdata=test)
rf.pred
rf.pred = unname(predict(crash.tree, newdata=test, type='vector'))
cat('Decision Tree MSE:', mean((rf.pred-test$crashes)^2))
mean((rf.pred-test$crashes)^2
))
mean((rf.pred-test$crashes)^2)
test$crashes
?randomForest
names(train)
names(train[,-11])
library(glmnet)
grid <- exp(seq(5, -10, length=100))
lm.lasso <- cv.glmnet(as.matrix(train[,-11]), train[,"crashes"], alpha=1, lambda=grid, standardize = TRUE)
lm.lasso <- cv.glmnet(as.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')]), train[,"crashes"], alpha=1, lambda=grid, standardize = TRUE)
as.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')]), train[,"crashes"]
as.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')])
as.factor(as.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')]))
#actually fitting model
lammin = lm.lasso$lambda.min
lm.lasso2 = glmnet(data.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')]), train[,"crashes"], alpha = 1, lambda=lammin)
library(glmnet)
grid <- exp(seq(5, -10, length=100))
lm.lasso <- cv.glmnet(data.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')]), train[,"crashes"], alpha=1, lambda=grid, standardize = TRUE)
plot(lm.lasso$glmnet.fit, label=TRUE, xvar="lambda")
#actually fitting model
lammin = lm.lasso$lambda.min
lm.lasso2 = glmnet(data.matrix(train[,c('month','day','temp','relhum','precip','wind.dir','wind.spd','visibility','pressure')]), train[,"crashes"], alpha = 1, lambda=lammin)
coef(lm.lasso2)
#mse
#calculating MSE
lasso.pred = predict(lm.lasso2, newdata = test, class = 'response')
?predict.glmnet
lm.lasso2
lm.lasso2$dev.ratio
cat('Value of Î» that results in the lowest MSE:', lammin)
# Chunk 1
load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
#cleaned and combined
regdata = load_first_object("../../rda_files/reg_data.rda")
# Chunk 2
#setting train and test
set.seed(2023)
regdata$year = as.numeric(substr(regdata$linker, 1, 4))
train = regdata[regdata$year < 2021,]
test = regdata[regdata$year == 2021,]
# Chunk 3
crash.lm = lm(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, x = TRUE, y = TRUE)
#summary(crash.lm)
crash.step = step(crash.lm, trace=0, direction = 'both')
cat('With backwards and forward selection using \'step()\':')
summary(crash.step)
#car::vif(crash.step)
# Chunk 4
#calculating MSE
crash.pred = predict(crash.step, newdata = test, class = 'response')
cat('MLR MSE:', mean((crash.pred-test$crashes)^2))
#plotting fit
plot(density(train$crashes), main='', xlab='Num. of Crashes per Day', ylim=c(0, 0.016), lwd=2)
lines(density(test$crashes), col=2, lwd=2)
lines(density(crash.pred), col=3, lwd=2)
legend("topright",
legend = c("Training Data", "Testing Data", "MLR w/ Step"),
col = 1:3,
lty = 1, lwd=2
)
# Chunk 5
library(np)
isa = is
#supress printing
quiet <- function(x) {
sink(tempfile())
on.exit(sink())
invisible(force(x))
}
# Chunk 6
#X = with(train,data.frame(month,day,temp,relhum,precip,wind.dir,wind.spd,visibility,pressure))
#np.test = quiet(with(train, npcmstest(model = crash.step, xdat = X, ydat = crashes)))
np.test = load_first_object('./MLR_nptest.Rdata')
np.test
# Chunk 7
par(mfrow=c(2,2))
plot(crash.step)
# Chunk 1
load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
#cleaned and combined
regdata = load_first_object("../../rda_files/reg_data.rda")
# Chunk 2
#setting train and test
set.seed(2023)
regdata$year = as.numeric(substr(regdata$linker, 1, 4))
train = regdata[regdata$year < 2021,]
test = regdata[regdata$year == 2021,]
# Chunk 3
crash.lm = lm(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, x = TRUE, y = TRUE)
#summary(crash.lm)
crash.step = step(crash.lm, trace=0, direction = 'both')
cat('With backwards and forward selection using \'step()\':')
summary(crash.step)
#car::vif(crash.step)
# Chunk 4
#calculating MSE
crash.pred = predict(crash.step, newdata = test, class = 'response')
cat('MLR MSE:', mean((crash.pred-test$crashes)^2))
#plotting fit
plot(density(train$crashes), main='', xlab='Num. of Crashes per Day', ylim=c(0, 0.016), lwd=2)
# Chunk 1
load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
#cleaned and combined
regdata = load_first_object("../../rda_files/reg_data.rda")
# Chunk 2
#setting train and test
set.seed(2023)
regdata$year = as.numeric(substr(regdata$linker, 1, 4))
train = regdata[regdata$year < 2021,]
test = regdata[regdata$year == 2021,]
# Chunk 3
crash.lm = lm(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, x = TRUE, y = TRUE)
#summary(crash.lm)
crash.step = step(crash.lm, trace=0, direction = 'both')
cat('With backwards and forward selection using \'step()\':')
summary(crash.step)
#car::vif(crash.step)
# Chunk 4
#calculating MSE
crash.pred = predict(crash.step, newdata = test, class = 'response')
cat('MLR MSE:', mean((crash.pred-test$crashes)^2))
#plotting fit
plot(density(train$crashes), main='', xlab='Num. of Crashes per Day', ylim=c(0, 0.016), lwd=2)
#calculating MSE
crash.pred = predict(crash.step, newdata = test, class = 'response')
cat('MLR MSE:', mean((crash.pred-test$crashes)^2))
library(np)
isa = is
#supress printing
quiet <- function(x) {
sink(tempfile())
on.exit(sink())
invisible(force(x))
}
X = with(train,data.frame(month,day,temp,relhum,precip,wind.dir,wind.spd,visibility,pressure))
nrow(train)
train = train[-72,]
row.names(train) = 1:nrow(train)
train[,722]
train[,72]
train[72,]
X = with(train,data.frame(month,day,temp,relhum,precip,wind.dir,wind.spd,visibility,pressure))
#X = with(train,data.frame(month,day,temp,relhum,precip,wind.dir,wind.spd,visibility,pressure))
np.test = quiet(with(train, npcmstest(model = crash.step, xdat = X, ydat = crashes)))
crash.lm = lm(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, x = TRUE, y = TRUE)
#summary(crash.lm)
crash.step = step(crash.lm, trace=0, direction = 'both')
X = with(train,data.frame(month,day,temp,relhum,precip,wind.dir,wind.spd,visibility,pressure))
#X = with(train,data.frame(month,day,temp,relhum,precip,wind.dir,wind.spd,visibility,pressure))
np.test = quiet(with(train, npcmstest(model = crash.step, xdat = X, ydat = crashes)))
#X = with(train,data.frame(month,day,temp,relhum,precip,wind.dir,wind.spd,visibility,pressure))
#np.test = quiet(with(train, npcmstest(model = crash.step, xdat = X, ydat = crashes)))
save(np.test, file='./MLR_nptest_no.Rdata')
nonp = npreg(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, regtype="ll", bwmethod="cv.aic")
#nonp = npreg(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, regtype="ll", bwmethod="cv.aic")
save(nonp, file='./nonpreg_no.Rdata')
#nonp = npreg(crashes~month+day+temp+relhum+precip+wind.dir+wind.spd+visibility+pressure, data=train, regtype="ll", bwmethod="cv.aic")
#save(nonp, file='./nonpreg_no.Rdata')
nonp = load_first_object('./nonpreg_no.Rdata')
nonp.test = npsigtest(nonp)
#nonp.test = npsigtest(nonp)
save(nonp.test, file='./nonp_sigtest_no.Rdata')
return(e[[ls(e)[1]]])
load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
alldata = load_first_object("../../rda_files/all_data.rda")
table(alldata$Cyclist.Flag)
table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])
summer = c('JUNE', 'JULY', 'AUGUST')
table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']) %in% summer
names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% summer
unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% summer]
cbind(c(1,2,3), c(4,5,6))
rbind(c(1,2,3), c(4,5,6))
c(c(1,2,3), c(4,5,6))
summer = c('JUNE', 'JULY', 'AUGUST')
fall = c('SEPTEMBER', 'OCTOBER', 'NOVEMBER')
winter = c('DECEMBER', 'JANUARY', 'FEBRUARY')
spring = c('MARCH', 'APRIL', 'MAY')
kwt = data.frame(
'season' = c('Summer', 'Fall', 'Winter', 'Spring'),
'bike' = c(
unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% summer],
unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% fall],
unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% winter],
unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% spring]
),
'motorcycle' = c(
unname(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year'])) %in% summer],
unname(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year'])) %in% fall],
unname(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year'])) %in% winter],
unname(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year'])) %in% spring]
)
)
kwt
table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])
'hi'*3
kwt = data.frame(
'season' = c(rep('Summer', 3), rep('Fall',3), rep('Winter',3), rep('Spring',3)),
'bike' = c(
unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% summer],
unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% fall],
unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% winter],
unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% spring]
),
'motorcycle' = c(
unname(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year'])) %in% summer],
unname(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year'])) %in% fall],
unname(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year'])) %in% winter],
unname(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Motorcycle.Flag == 'Yes','Month.Of.Year'])) %in% spring]
)
)
kwt
table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])
bike = kruskal.test(bike ~ season, data = kwt)
bike
motor = kruskal.test(motorcycle ~ season, data = kwt)
motor
#plotting
boxplot(kwt)
#plotting
boxplot(season~bike+motorcycle, data = kwt)
#plotting
boxplot(bike+motorcycle~season, data = kwt)
#plotting
boxplot(bike+motorcycle~season, data = kwt)
#plotting
boxplot(bike,motorcycle~season, data = kwt)
DF2 <- data.frame(
x = c(c(A1, A2, A3), c(B1, B2, B3)),
y = rep(c("A", "B"), each = 15),
z = rep(rep(1:3, each=5), 2),
stringsAsFactors = FALSE
)
A1 <- c(1,2,9,6,4)
A2 <- c(5,1,9,2,3)
A3 <- c(1,2,3,4,5)
B1 <- c(2,4,6,8,10)
B2 <- c(0,3,6,9,12)
B3 <- c(1,1,2,8,7)
DF2 <- data.frame(
x = c(c(A1, A2, A3), c(B1, B2, B3)),
y = rep(c("A", "B"), each = 15),
z = rep(rep(1:3, each=5), 2),
stringsAsFactors = FALSE
)
DF2
library(tidyr)
gather(kwt, bike, motorcycle)
gather(kwt, season, bike, motorcycle)
?gather
gather(kwt)
gather(kwt, season)
gather(kwt, bike, motorcycle)
gather(kwt, bike, motorcycle, season)
gather(kwt, bike, motorcycle, season, factor_key = TRUE)
gather(kwt, season, factor_key = TRUE)
gather(kwt, season, season factor_key = TRUE)
gather(kwt, season, season, factor_key = TRUE)
gather(kwt, factor_key = TRUE)
gather(kwt, season)
test = gather(kwt, season)
gather(kwt, test)
test
test$season = rep(rep('Summer', 3), rep('Fall',3), rep('Winter',3), rep('Spring',3), 2)
test
rep(rep('Summer', 3), rep('Fall',3), rep('Winter',3), rep('Spring',3), 2)
rep(c(rep('Summer', 3), rep('Fall',3), rep('Winter',3), rep('Spring',3)), 2)
test$season = rep(c(rep('Summer', 3), rep('Fall',3), rep('Winter',3), rep('Spring',3)), 2)
test
colnames(test$season)
colnames(test)
test = gather(kwt, season)
colnames(test)
test
long = tidyr::gather(kwt, season)
colnames(long) = c('Type', 'Count')
test$Season = rep(c(rep('Summer', 3), rep('Fall',3), rep('Winter',3), rep('Spring',3)), 2)
library(ggplot2)
ggplot(long, aes(Count, Season, fill=factor(Type))) +
geom_boxplot()
dev.off()
ggplot(long, aes(Count, Season, fill=factor(Type))) +
geom_boxplot()
test
long = tidyr::gather(kwt, season)
colnames(long) = c('Type', 'Count')
colnames(long)
test$Season = rep(c(rep('Summer', 3), rep('Fall',3), rep('Winter',3), rep('Spring',3)), 2)
library(ggplot2)
ggplot(long, aes(Count, Season, fill=factor(Type))) +
geom_boxplot()
long = tidyr::gather(kwt, season)
colnames(long) = c('Type', 'Count')
long$Season = rep(c(rep('Summer', 3), rep('Fall',3), rep('Winter',3), rep('Spring',3)), 2)
library(ggplot2)
ggplot(long, aes(Count, Season, fill=factor(Type))) +
geom_boxplot()
#plotting
long = tidyr::gather(kwt, season)
colnames(long) = c('Type', 'Count')
long$Season = rep(c(rep('Summer', 3), rep('Fall',3), rep('Winter',3), rep('Spring',3)), 2)
library(ggplot2)
ggplot(long, aes(y=Count, x=Season, fill=factor(Type))) +
geom_boxplot()
ggplot(long, aes(y=Count, x=Season, fill=Type)) +
geom_boxplot()
long
#plotting
long = tidyr::gather(kwt, season)
colnames(long) = c('Type', 'Count')
long$Season = factor(rep(c(rep('Summer', 3), rep('Fall',3), rep('Winter',3), rep('Spring',3)), 2))
library(ggplot2)
ggplot(long, aes(y=Count, x=Season, fill=Type)) +
geom_boxplot()
#plotting
long = tidyr::gather(kwt, season)
colnames(long) = c('Type', 'Count')
long$Season = factor(rep(c(rep('Summer', 3), rep('Fall',3), rep('Winter',3), rep('Spring',3)), 2), ordered = TRUE)
library(ggplot2)
ggplot(long, aes(y=Count, x=Season, fill=Type)) +
geom_boxplot()
str(long$Season)
levels(long$Season)
#plotting
long = tidyr::gather(kwt, season)
colnames(long) = c('Type', 'Count')
long$Season = factor(rep(c(rep('Summer', 3), rep('Fall',3), rep('Winter',3), rep('Spring',3)), 2),
levels = c('Summer', 'Fall', 'Winter', 'Spring'), ordered = TRUE)
library(ggplot2)
ggplot(long, aes(y=Count, x=Season, fill=Type)) +
geom_boxplot()
cyclist = data.frame(
'Summer' = unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% summer],
'Fall' = unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% fall],
'Winter' = unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% winter],
'Spring' = unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% spring]
)
cyclist
unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% summer]
cyclist = data.frame(
'Summer' = c(unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% summer]),
'Fall' = c(unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% fall]),
'Winter' = c(unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% winter]),
'Spring' = c(unname(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year']))[names(table(alldata[alldata$Cyclist.Flag == 'Yes','Month.Of.Year'])) %in% spring])
)
cyclist
#test
aov(cyclist)
stack(cyclist)
kwt
str(kwt)
#bike = kruskal.test(bike ~ season, data = kwt)
#motor = kruskal.test(motorcycle ~ season, data = kwt)
bike = aov(bike~season, data = kwt)
bike
summary(bike)
table(alldata$Time.Category)
alldata[,c('Time.Category', 'Cr')]
names(alldata)
alldata[,c('Time.Category', 'Total.Crashes', 'Total.Victims')]
table(alldata[,c('Time.Category', 'Total.Victims')])
groupby(alldata[,c('Time.Category', 'Total.Victims')], )
??groupby
dplyr::group_by(alldata[,c('Time.Category', 'Total.Victims')], Time.Category)
dplyr::group_by_(alldata[,c('Time.Category', 'Total.Victims')], Time.Category)
library(dplyr)
alldata[,c('Time.Category', 'Total.Victims')] %>% group_by(Time.Category) %>% summarise(sum = sum(Total.Victims))
victims = alldata[,c('Time.Category', 'Total.Victims')] %>% group_by(Time.Category) %>% summarise(sum = sum(Total.Victims))
victims
table(alldata$Time.Category)
victims$sum/table(alldata$Time.Category)
326/977
5179/14473
unname(victims$sum/table(alldata$Time.Category))
victims
victims$time = c(rep('nighttime'), 2), rep('daytime', 5), 'nighttime')
victims$ratio = unname(victims$sum/table(alldata$Time.Category))
victims$time = c(rep('nighttime', 2), rep('daytime', 5), 'nighttime')
victimw
victims
fatality = aov(ratio~time, data = victims)
summary(fatality)
ggplot(victims, aes(y=ratio, x=time)) +
geom_boxplot()
ggplot(victims, aes(y=ratio, x=time)) +
geom_boxplot(fill='red')
plot(crashes~temp, data=regdata)
plot(crashes~temp, data=regdata)
lines(function(x,y) panel.smooth(x,y,lwd=2,span=0.8))
plot(crashes~temp, data=regdata)
lines(panel.smooth(regdata$temp,regdata$crashes,lwd=2,span=0.8))
plot(crashes~temp, data=regdata)
lines(panel.smooth(temp,crashes,data=regdata,lwd=2,span=0.8))
names(regdata)
plot(crashes~visibility, data=regdata)
lines(panel.smooth(regdata$temp,regdata$visibility,lwd=2,span=0.8))
plot(crashes~visibility, data=regdata)
lines(panel.smooth(regdata$temp,regdata$visibility,lwd=2,span=0.2))
plot(crashes~visibility, data=regdata)
lines(panel.smooth(regdata$temp,regdata$visibility,lwd=2,span=0.8))
names(alldata)
table(alldata$Derived.Crash.Configuration)
single = alldata[alldata$Derived.Crash.Configuration == "SINGLE VEHICLE",]
nrow(single)
table(single$Month.Of.Year)
#single = alldata[alldata$Derived.Crash.Configuration == "SINGLE VEHICLE",]
single = data.frame(
'Season' = c(rep('Summer', 3), rep('Fall',3), rep('Winter',3), rep('Spring',3)),
'Count' = c(
unname(table(alldata[alldata$Derived.Crash.Configuration == "SINGLE VEHICLE",'Month.Of.Year']))[names(table(alldata[alldata$Derived.Crash.Configuration == "SINGLE VEHICLE",'Month.Of.Year'])) %in% summer],
unname(table(alldata[alldata$Derived.Crash.Configuration == "SINGLE VEHICLE",'Month.Of.Year']))[names(table(alldata[alldata$Derived.Crash.Configuration == "SINGLE VEHICLE",'Month.Of.Year'])) %in% fall],
unname(table(alldata[alldata$Derived.Crash.Configuration == "SINGLE VEHICLE",'Month.Of.Year']))[names(table(alldata[alldata$Derived.Crash.Configuration == "SINGLE VEHICLE",'Month.Of.Year'])) %in% winter],
unname(table(alldata[alldata$Derived.Crash.Configuration == "SINGLE VEHICLE",'Month.Of.Year']))[names(table(alldata[alldata$Derived.Crash.Configuration == "SINGLE VEHICLE",'Month.Of.Year'])) %in% spring]
)
)
single
table(single$Month.Of.Year)
single.aov = aov(Count~Season, data = single)
summary(single.aov)
ggplot(victims, aes(y=Count, x=Season)) +
geom_boxplot(fill='red')
ggplot(single, aes(y=Count, x=Season)) +
geom_boxplot(fill='red')
TukeyHSD(single.aov)
TukeyHSD(fatality)
TukeyHSD(bike)
TukeyHSD(motor)
motor = aov(motorcycle~season, data = kwt)
summary(motor)
TukeyHSD(motor)
load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
#cleaned and combined
regdata = load_first_object("../../rda_files/reg_data.rda")
names(regdata)
table(regdata$month)
library(dplyr)
distr = regdata[,c('month', 'crashes')] %>% group_by(month) %>% summarise(sum = sum(crashes))
distr
t(distr)
