xml2::xml_contents(alla[6])
alla = xml2::xml_find_all(req, ".//*[a]")
alla
alla = xml2::xml_find_all(req, ".//*a[@class='list_product_a']")
alla = xml2::xml_find_all(req, ".//*[@class='list_product_a']")
alla
alla = xml2::xml_find_all(req, ".//*[list_product_a]")
alla
alla = xml2::xml_find_all(req, ".//*[a]")
alla
alla[6]
xml2::content(alla[6])
xml2::cotents(alla[6])
xml2::contents(alla[6])
xml2::xml_contents(alla[6])
xml2::xml_contents(alla[6])[1]
xml2::html_contents(alla[6])[1]
??xml_contents
xml2::html_children(alla[6])[1]
xml2::xml_children(alla[6])[1]
xml2::xml_children(alla[6][1])[1]
alla[6]
str(alla[6])
xml2::xml_children(alla)[1]
xml2::xml_children(alla)
alla
req
resXML <- htmlParse(content(req, as = "text"))
resXML <- XML::htmlParse(content(req, as = "text"))
install.packages("XML")
resXML <- XML::htmlParse(content(req, as = "text"))
resXML <- XML::htmlParse(httr::content(req, as = "text"))
resXML <- XML::htmlParse(req)
resXML
getNodeSet(resXML, '//li')
XML::getNodeSet(resXML, '//li')
XML::getNodeSet(resXML, './/*[@class='list_product_a')
XML::getNodeSet(resXML, "//*[@class='list_product_a']")
resXML
XML::getNodeSet(resXML, "//*[@class='products']")
XML::getNodeSet(resXML, "//*[@class='products']/li")
XML::getNodeSet(resXML, "//*[@class='products']/li")[[1]]
lst = XML::getNodeSet(resXML, "//*[@class='products']/li")
lst
lst[1]
lst[[1]]
str(lst[[1]])
XML::getChildrenStrings(lst[[1]])
XML::xmlValue(lst[[1]])
?grep
grep('title=', lst[[1]])
as.character(lst[[1]])
lst[[1]]
toString(lst[[1]])
XML::getChildrenStrings(lst[[1]])
XML::toString.XMLNode(lst[[1]])
grep('title=', XML::toString.XMLNode(lst[[1]]))
sub('title=', XML::toString.XMLNode(lst[[1]]))
sub('title=', '', XML::toString.XMLNode(lst[[1]]))
grep('title=', XML::toString.XMLNode(lst[[1]]), value=TRUE)
grep('title=\"*"', XML::toString.XMLNode(lst[[1]]), value=TRUE)
grep('title=\"*\"', XML::toString.XMLNode(lst[[1]]), value=TRUE)
grep('title=\".*?\"', XML::toString.XMLNode(lst[[1]]), value=TRUE)
grep('title=\\.*?\\', XML::toString.XMLNode(lst[[1]]), value=TRUE)
grep('title=".*?"', XML::toString.XMLNode(lst[[1]]), value=TRUE)
grep('title=".*?">', XML::toString.XMLNode(lst[[1]]), value=TRUE)
grep('title= .* ">\n', XML::toString.XMLNode(lst[[1]]), value=TRUE)
grep('title= .* ">', XML::toString.XMLNode(lst[[1]]), value=TRUE)
grep('title= .* "', XML::toString.XMLNode(lst[[1]]), value=TRUE)
grep('title= .* \"', XML::toString.XMLNode(lst[[1]]), value=TRUE)
grep('title=.* \"', XML::toString.XMLNode(lst[[1]]), value=TRUE)
grep('title=.*\"', XML::toString.XMLNode(lst[[1]]), value=TRUE)
grep('<span>.*</span>', XML::toString.XMLNode(lst[[1]]), value=TRUE)
regmatches('<span>.*</span>', XML::toString.XMLNode(lst[[1]]))
regmatches(XML::toString.XMLNode(lst[[1]]),regexpr("<span>.*</span>",XML::toString.XMLNode(lst[[1]])))
regexpr("<span>.*</span>",XML::toString.XMLNode(lst[[1]]))
gregexpr("<span>.*</span>",XML::toString.XMLNode(lst[[1]]))
> sub("<span>.*</span>", "\\1", XML::toString.XMLNode(lst[[1]]) ,perl=TRUE)
sub("<span>.*</span>", "\\1", XML::toString.XMLNode(lst[[1]]) ,perl=TRUE)
gsub(".*<span>|</span>.*", "", XML::toString.XMLNode(lst[[1]]))
len(lst)
length(lst)
gsub(".*href=\"\product/|/.*", "", XML::toString.XMLNode(lst[[1]]))
gsub(".*href=\"/product/|/.*", "", XML::toString.XMLNode(lst[[1]]))
search = function(term){
require(httr); require(XML)
req = httr::content(httr::GET('https://world.openfoodfacts.org/cgi/search.pl?action=process&tagtype_0=categories&tag_contains_0=contains&tag_0=cereals'), 'parse')
resXML = XML::htmlParse(req)
lst = XML::getNodeSet(resXML, "//*[@class='products']/li")
titles = c()
prodnums = c()
for (i in 1:length(lst)){
titles = c(titles, gsub(".*<span>|</span>.*", "", XML::toString.XMLNode(lst[[i]])))
prodnums = c(prodnums, gsub(".*href=\"/product/|/.*", "", XML::toString.XMLNode(lst[[i]])))
}
return(data.frame(titles, prodnums))
}
search()
search = function(term){
require(httr); require(XML)
req = httr::content(httr::GET(paste0('https://world.openfoodfacts.org/cgi/search.pl?search_terms=', term, '&search_simple=1&action=process')), 'parse')
resXML = XML::htmlParse(req)
lst = XML::getNodeSet(resXML, "//*[@class='products']/li")
titles = c()
prodnums = c()
for (i in 1:length(lst)){
titles = c(titles, gsub(".*<span>|</span>.*", "", XML::toString.XMLNode(lst[[i]])))
prodnums = c(prodnums, gsub(".*href=\"/product/|/.*", "", XML::toString.XMLNode(lst[[i]])))
}
return(data.frame(titles, prodnums))
}
search(eggs)
search('eggs')
??ggpairs
install.packages('GGally')
knitr::opts_chunk$set(echo = TRUE)
library(GGally)
ggpairs(body)
??ggpairs
body
names(body)
library(gclus)
data(body)
body
ggpairs(body)
body[,c("")]
names(body)
body[,c("WaistG", "AdbG", "HipG", "ThighG", "BicepG", "ForearmG", "KneeG")]
body[, ..c("WaistG", "AdbG", "HipG", "ThighG", "BicepG", "ForearmG", "KneeG")]
class(body)
body[,c("WaistG", "AdbG", "HipG", "ThighG", "BicepG", "ForearmG", "KneeG")]
names(body)
body[,c("WaistG", "AbdG", "HipG", "ThighG", "BicepG", "ForearmG", "KneeG")]
??ggpairs
??GGally::wrap
names(body)
mean(body[body$Gender==1, "Height"])
mean(body[body$Gender==0, "Height"])
mean(body[body$Gender==0, "Waist G"])
mean(body[body$Gender==0, "WaistG"])
mean(body[body$Gender==1, "WaistG"])
??body
??ggplot2::guides
install.packages('rjson')
??fromJSON
install.packages('rjson')
install.packages('RJSONIO')
??RJSONIO
??RJSONIO::fromJSON
install.packages('ggthemes')
library(openFoodwrappeR)
y = product('kale smoothie', num=4)
x = product('nutella', num=3)
class(x)
length(x$product)
z = product_by_prodnum('3168930010906')
class(z)
length(z$product)
carbon_footprint(x)
plot_carbon(list(x, y, z))
view_allergens(x)
plot_carbon(list(x, y, z))
library(openFoodwrappeR)
y = product('kale smoothie', num=4)
y = product('kale smoothie', num=4)
x = product('nutella', num=3)
z = product_by_prodnum('3168930010906')
plot_carbon(list(x, y, z))
?require
```{r setup}
library(openFoodwrappeR)
y = product('kale smoothie', num=4)
y = product('kale smoothie', num=4)
x = product('nutella', num=3)
z = product_by_prodnum('3168930010906')
plot_carbon(list(x, y, z))
require(arules, quietly = TRUE)
require(MASS, quietly=TRUE, warn.conflicts = FALSE)
food_group(x)
load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
weatherdata = load_first_object("../../rda_files/all_data.rda")
getwd()
setwd('/home/jonah/mds/sideproject/kelowna_weathercrash/stats_scripts/variableinvestigation')
load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
weatherdata = load_first_object("../../rda_files/all_data.rda")
names(weatherdata)
type(weatherdata$linker)
class(weatherdata$linker)
str(weatherdata$linker)
str(weatherdata$Month.Of.Year)
library(lubridate)
mdy("AUGUST")
month("AUGUST")
match("AUGUST", month.names)
match("AUGUST", month.name)
match("AUGUST", month.abb)
match(tolower("AUGUST"), month.name)
month.name
match(tolower("AUGUST"), tolower(month.name))
match(tolower(head(weatherdata$Month.Of.Year)), tolower(month.name))
head(weatherdata$Month.Of.Year)
weatherdata[,"monthnumber"] = match(tolower(weatherdata$Month.Of.Year), tolower(month.name))
names(weatherdata)
table(weatherdata$monthnumber)
?panel.grid.major.x
??panel.grid.major.x
library(ggplot2)
library(ggthemes)
theme_set(theme_few())
library(tidyverse)
load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
weatherdata = load_first_object("../../rda_files/all_data.rda")
table(weatherdata$Day.Of.Week)
table(weatherdata$Month.Of.Year)
week.abb
weekdays()
weekdays
weekdays(Day)
weekdays()
?weekdays()
#reordering factor
weatherdata$Day.Of.Week = factor(weatherdata$Day.Of.Week,
levels=c("SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY"))
weeknames = c("SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY")
weeknames
substr(weeknames, start=1, stop=3)
month.abb
toupper(month.name)
names(weatherdata)
seq(1, 40)
IQR(seq(1, 40))
?IQR
quantile(seq(1, 40), 3)
quantile(seq(1, 40))
?quantile
quantile(seq(1, 40), probs=0.3)
library(ggplot2)
library(ggthemes)
theme_set(theme_few())
library(tidyverse)
load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
#cleaned and combined
alldata = load_first_object("../../rda_files/all_data.rda")
#weatherdata
weatherdata = c()
for (i in c(2017:2021)){
for (j in c(1:12)){
temp = subset(read.csv(paste0('../../weatherdata/en_climate_hourly_BC_1123939_',
sprintf("%02d", j), '-', i, '_P1H.csv')),
select = - c(`Temp.Flag`,
`Dew.Point.Temp.Flag`, `Rel.Hum.Flag`,
`Precip..Amount.Flag`, `Wind.Dir.Flag`,
`Wind.Spd.Flag`, `Visibility.Flag`,
`Stn.Press.Flag`, `Hmdx`, `Hmdx.Flag`, `Wind.Chill.Flag`))
weatherdata = rbind(weatherdata, temp)
}
}
class(weatherdata)
class(alldata)
ggplot(aes(x=Temp...C.)) +
geom_histogram(data=weatherdata, aes(y = after_stat(density)), colour='#00008b', fill='#6495ed', bins=20, alpha=0.3) +
geom_histogram(data=alldata, aes(y=after_stat(density)), bins=20) +
xlab('Temperature') +
ylab('Count') +
scale_x_continuous(labels = scales::label_number(suffix = "°C", accuracy=1),
limits = c(-40, 40))
summary(alldata$Temp...C.)
ggplot(aes(x=Temp...C., y=after_stat(density))) +
geom_histogram(data=weatherdata, colour='#00008b', fill='#6495ed', bins=20, alpha=0.3) +
geom_histogram(data=alldata, bins=20) +
xlab('Temperature') +
ylab('Count') +
scale_x_continuous(labels = scales::label_number(suffix = "°C", accuracy=1),
limits = c(-40, 40))
rlang::last_error()
alldata %>%
ggplot(aes(x=Temp...C.)) +
geom_histogram(colour='#00008b', fill='#6495ed', bins=20) +
xlab('Temperature') +
ylab('Count') +
scale_x_continuous(labels = scales::label_number(suffix = "°C", accuracy=1),
limits = c(-40, 40))
ggplot(aes(x=Temp...C.)) +
geom_density(data=weatherdata) +
geom_density(data=alldata)
ggplot(data=weatherdata, aes(x=Temp...C.)) +
geom_density() +
geom_density(data=alldata)
?ggplot2::legend
??ggplot2::legend
ggplot(data=weatherdata, aes(x=Temp...C.)) +
geom_density(colour='#1d2951', fill='#1d2951', alpha=0.3) +
geom_density(data=alldata, colour='#6495ed', fill='#6495ed', alpha=0.3) +
scale_color_identity(name = '',
breaks = c('#1d2951', '#6495ed'),
labels = c('Year Round', 'Crash Temps'),
guide = 'legend')
ggplot(data=weatherdata, aes(x=Temp...C.)) +
geom_density(colour='#1d2951', fill='#1d2951', alpha=0.3) +
geom_density(data=alldata, colour='#6495ed', fill='#6495ed', alpha=0.3)
data.frame(
'Avg temp.' = mean(weatherdata$Temp...C.),
'Avg crash temp.' = mean(alldata$Temp...C.)
)
data.frame(
'Avg temp.' = mean(weatherdata$Temp...C., na.rm=TRUE),
'Avg crash temp.' = mean(alldata$Temp...C., na.rm = TRUE)
)
ggplot(data=weatherdata, aes(x=Temp...C.)) +
geom_density(colour='#1d2951', fill='#1d2951', alpha=0.7) +
geom_density(data=alldata, colour='#6495ed', fill='#6495ed', alpha=0.7)
data.frame(
'Avg temp.' = mean(weatherdata$Temp...C., na.rm=TRUE),
'Avg crash temp.' = mean(alldata$Temp...C., na.rm = TRUE)
)
ggplot(data=weatherdata, aes(x=Temp...C.)) +
geom_density(colour='#1d2951', fill='#1d2951', alpha=0.9) +
geom_density(data=alldata, colour='#6495ed', fill='#6495ed', alpha=0.6)
scale_color_identity(name = '',
breaks = c('#1d2951', '#6495ed'),
labels = c('Year Round', 'Crash Temps'),
guide = 'legend')
ggplot(data=weatherdata, aes(x=Temp...C.)) +
geom_density(colour='#1d2951', fill='#1d2951', alpha=0.9) +
geom_density(data=alldata, colour='#6495ed', fill='#6495ed', alpha=0.6)
ggplot(data=weatherdata, aes(x=Temp...C.)) +
geom_density(colour='#1d2951', fill='#1d2951', alpha=0.9) +
geom_density(data=alldata, colour='#6495ed', fill='#6495ed', alpha=0.6) +
scale_color_identity(name = '',
breaks = c('#1d2951', '#6495ed'),
labels = c('Year Round', 'Crash Temps'),
guide = 'legend')
ggplot(data=weatherdata, aes(x=Temp...C.)) +
geom_density(colour='#1d2951', fill='#1d2951', alpha=0.9) +
geom_density(data=alldata, colour='#6495ed', fill='#6495ed', alpha=0.6) +
scale_color_identity(name = '',
breaks = c('#1d2951', '#6495ed'),
labels = c('Year Round', 'Crash Temps'),
guide = 'legend') +
theme(legend.position = "bottom")
library(bestglm)
load('./bsim.Rdata')
asim.df = as.data.frame(asim)
library(ggplot2)
library(ggthemes)
theme_set(theme_few())
library(tidyverse)
load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
#cleaned and combined
alldata = load_first_object("../../rda_files/all_data.rda")
#reading as.factor
factors = c("Fog", "Freezing.Rain", "Snow", "Rain", "Thunderstorms")
for (i in factors){
alldata[,i] = as.factor(alldata[,i])
}
#weatherdata
weatherdata = c()
for (i in c(2017:2021)){
for (j in c(1:12)){
temp = subset(read.csv(paste0('../../weatherdata/en_climate_hourly_BC_1123939_',
sprintf("%02d", j), '-', i, '_P1H.csv')),
select = - c(`Temp.Flag`,
`Dew.Point.Temp.Flag`, `Rel.Hum.Flag`,
`Precip..Amount.Flag`, `Wind.Dir.Flag`,
`Wind.Spd.Flag`, `Visibility.Flag`,
`Stn.Press.Flag`, `Hmdx`, `Hmdx.Flag`, `Wind.Chill.Flag`))
weatherdata = rbind(weatherdata, temp)
}
}
summary(alldata)
numeric = unlist(lapply(alldata, is.numeric), use.names = FALSE)
pairs(alldata[,numeric])
names(alldata)
library(ggplot2)
library(ggthemes)
theme_set(theme_few())
library(tidyverse)
load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
#cleaned and combined
alldata = load_first_object("../../rda_files/all_data.rda")
#reading as.factor
factors = c("Fog", "Freezing.Rain", "Snow", "Rain", "Thunderstorms")
for (i in factors){
alldata[,i] = as.factor(alldata[,i])
}
#weatherdata
weatherdata = c()
for (i in c(2017:2021)){
for (j in c(1:12)){
temp = subset(read.csv(paste0('../../weatherdata/en_climate_hourly_BC_1123939_',
sprintf("%02d", j), '-', i, '_P1H.csv')),
select = - c(`Temp.Flag`,
`Dew.Point.Temp.Flag`, `Rel.Hum.Flag`,
`Precip..Amount.Flag`, `Wind.Dir.Flag`,
`Wind.Spd.Flag`, `Visibility.Flag`,
`Stn.Press.Flag`, `Hmdx`, `Hmdx.Flag`, `Wind.Chill.Flag`))
weatherdata = rbind(weatherdata, temp)
}
}
numeric = unlist(lapply(alldata, is.numeric), use.names = FALSE)
names(alldata)
summary(alldata$Crash.Severity)
summary(alldata$Total.Crashes)
for (i in 1:length(names(alldata[,numeric]-1))){
plot(alldata[,names(alldata[,numeric])[i]]~alldata[,names(alldata[,numeric])[i+1]])
readLines(n=1)
print(paste('y:', names(alldata[,numeric])[i]))
print(paste('x:', names(alldata[,numeric])[i+1]))
}
for (i in 1:length(names(alldata[,numeric]-1))){
plot(alldata[,names(alldata[,numeric])[i]]~alldata[,names(alldata[,numeric])[i+1]])
print(paste('y:', names(alldata[,numeric])[i]))
print(paste('x:', names(alldata[,numeric])[i+1]))
readLines(n=1)
}
names(alldata)
names(alldata[,numeric])
head(alldata$Metric.Selector)
summary(alldata$Metric.Selector)
names9alldata
names(alldata)
gc()
library(ggplot2)
library(ggthemes)
theme_set(theme_few())
library(tidyverse)
load_first_object <- function(fname){
#this function was written by Dr. Rhonda Rosychuk at the U of A
e <- new.env(parent = parent.frame())
load(fname, e)
return(e[[ls(e)[1]]])
}
#cleaned and combined
alldata = load_first_object("../../rda_files/all_data.rda")
#reading as.factor
factors = c("Fog", "Freezing.Rain", "Snow", "Rain", "Thunderstorms")
for (i in factors){
alldata[,i] = as.factor(alldata[,i])
}
#weatherdata
weatherdata = c()
for (i in c(2017:2021)){
for (j in c(1:12)){
temp = subset(read.csv(paste0('../../weatherdata/en_climate_hourly_BC_1123939_',
sprintf("%02d", j), '-', i, '_P1H.csv')),
select = - c(`Temp.Flag`,
`Dew.Point.Temp.Flag`, `Rel.Hum.Flag`,
`Precip..Amount.Flag`, `Wind.Dir.Flag`,
`Wind.Spd.Flag`, `Visibility.Flag`,
`Stn.Press.Flag`, `Hmdx`, `Hmdx.Flag`, `Wind.Chill.Flag`))
weatherdata = rbind(weatherdata, temp)
}
}
numeric = unlist(lapply(alldata, is.numeric), use.names = FALSE)
names(alldata[,numeric])
alldata[1,]
alldata[2,]
alldata[1:2,]
names(alldata[,numeric])
summary(alldata$Total.Victims)
numeric[1] = FALSE
names(alldata[,numeric])
nuermic
numeric
numeric[2] = FALSE
names(alldata[,numeric])
pairs(alldata[,numeric])
summary(alldata[,c('Temp...C.', 'Dew.Point.Temp...C.', 'Wind.Chill')])
pairs(alldata[,c('Temp...C.', 'Dew.Point.Temp...C.', 'Wind.Chill')])
corr(alldata[,c('Temp...C.', 'Dew.Point.Temp...C.', 'Wind.Chill')])
cor(alldata[,c('Temp...C.', 'Dew.Point.Temp...C.', 'Wind.Chill')])
cor(alldata[,c('Temp...C.', 'Dew.Point.Temp...C.', 'Wind.Chill')], na.rm = TRUE)
rcorr(alldata[,c('Temp...C.', 'Dew.Point.Temp...C.', 'Wind.Chill')], na.rm = TRUE)
cor(alldata[,c('Temp...C.', 'Dew.Point.Temp...C.', 'Wind.Chill')], use = 'complete.obs\')
cor(alldata[,c('Temp...C.', 'Dew.Point.Temp...C.', 'Wind.Chill')], use = 'complete.obs')
names(alldata)
alldata = alldata[,-c(23, 30)]
names(alldata)
numeric = unlist(lapply(alldata, is.numeric), use.names = FALSE)
numeric[2] = FALSE
names(alldata[,numeric])
pairs(alldata[,numeric])
